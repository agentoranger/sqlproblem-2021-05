2021-01-12 17:52:55 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] LOG:  duration: 2194.720 ms  plan:
	Query Text: select 	DISTINCT
			crmacct_id::integer,crmacct_number::text, crmacct_name::text,
			addr_line1::text,addr_line2::text,addr_line3::text,addr_city::text,addr_state::text,addr_postalcode::text,ww_zip_code_county::text,
			prov_speciality::text[],
			prov_ppo::text[],
			abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long)) dist,
			phone.cntctphone_phone phone, fax.cntctphone_phone fax,provider_ext_part,
			case_management_notes_text network_search_results_notes,_role,provider_language_minority.spoken_language,
			case 
				when provider_language_minority.minority <@ '{true}' then true
				else false
			end as minority,health_system_name,array_to_string(doctor_list,',') doctor_list,do_not_use_text,
			(SELECT ww_custom.donotoperate((select state_id from public.state where state_abbr = addr_state and state_country_id = 230))) as do_not_operate
			from public.crmacct
			join public.crmacctrole on crmacctrole_crmacct_id = crmacct_id and crmacctrole_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = _role)
			join public.addr on (select ww_custom.get_panel_primary_address(crmacct_id)) = addr_id 
			left join ww_custom.ww_zip_code on ww_zip_code_code = addr_postalcode
			left join ww_custom.provider_specialities_view prov_speciality on prov_speciality.provider_specialities_provider_id = crmacct_id			
			left join ww_custom.provider_ppo_view prov_ppo on prov_ppo.provider_ppo_provider_id = crmacct_id		
			LEFT JOIN ww_custom.provider_ext on crmacct_id = provider_ext_provider_id
			left join ww_custom.health_system on health_system_id = provider_ext_health_system_id
			LEFT JOIN ww_custom.provider_language_minority on crmacct_id = phy_crmacct_id	
			LEFT JOIN public.crmacctcntctass on crmacctcntctass_crmacct_id = crmacct_id and crmacctcntctass_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Scheduling')		
			LEFT JOIN 
			(		
				select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
				and cntctphone_phone like '800-%' 
				union 
				select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
				and cntctphone_phone not like '800-%' 
				and cntctphone_cntct_id not in 
				(
					select cntctphone_cntct_id  from public.cntctphone  
					where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
					and cntctphone_phone like '800-%'	 		
				)
			) phone on phone.cntctphone_cntct_id = crmacctcntctass_cntct_id 
			LEFT JOIN
			(
				select crmacctcntctass_crmacct_id,array_agg(cntct.cntct_name) doctor_list
				from public.crmacctcntctass 
				join public.cntct on cntct_id = crmacctcntctass_cntct_id
				where crmacctcntctass_crmrole_id = 23 and crmacctcntctass_active
				and upper(cntct_name) ~ upper(_doctor)
				group by crmacctcntctass_crmacct_id
			) doc on doc.crmacctcntctass_crmacct_id = crmacct_id
			LEFT JOIN
			(
				select special_instruction_crmacct_id,
				case  
					when special_instruction_text != '' then true 
					else false
				end as do_not_use_text
				from ww_custom.special_instruction
				join ww_custom.special_instruction_category on special_instruction_category_category_id = special_instruction_category_id
				where special_instruction_category_id = 92
			) dnu on dnu.special_instruction_crmacct_id = crmacct_id
			LEFT JOIN
			(
			select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
			where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
			and cntctphone_phone like '800-%'
			union
			select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
			where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
			and cntctphone_phone not like '800-%'
			and cntctphone_cntct_id not in
				(
				select cntctphone_cntct_id  from public.cntctphone
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
				and cntctphone_phone like '800-%'
				)
			) fax on fax.cntctphone_cntct_id = crmacctcntctass_cntct_id			
			LEFT JOIN 
			(	
				select case_management_notes_provider_id,
				string_agg(case_management_notes_department || ':' || case_management_notes_text,',') case_management_notes_text
				from ww_custom.case_management_notes
				group by case_management_notes_provider_id
			) fgty on case_management_notes_provider_id = crmacct_id
			where 1 = 1
			and 	( 
					abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long)) < _distance
					OR addr_postalcode like '%' || _search_zip || '%'
				)
			and (upper(array_to_string(Coalesce(doctor_list,'{}'),',')) ~ upper(_doctor))
			and (COALESCE(prov_ppo,'{}') @> _ppo OR COALESCE(prov_ppo,'{}') && _ppo) 
			and (COALESCE(prov_speciality,'{}') @> _speciality OR COALESCE(prov_speciality,'{}') && _speciality)		
			and (COALESCE(provider_language_minority.spoken_language,'{English}') @> _language)
			--and (_minority @> COALESCE(provider_language_minority.minority,'{false}')   )						
			and ( provider_language_minority.minority @> '{false}' )
			and UPPER(crmacct_name) like '%' || UPPER(_practice_name) || '%'
			and UPPER(addr_line1) like '%' || UPPER(_address) || '%'
			and UPPER(addr_city) like '%' || UPPER(_city) || '%'
			and UPPER(addr_state) like '%' || UPPER(_state) || '%'
			and UPPER(ww_zip_code_county) like '%' || UPPER(_county) || '%'		
			and 
			( 
				coalesce(phone.cntctphone_phone,'') like  _phone_ac || '%'
				and replace(coalesce(phone.cntctphone_phone,''),'-','') like  '%' || _phone_number || '%'
			)
			and 
			(
				coalesce(fax.cntctphone_phone,'') like  _fax_ac || '%'
				and replace(coalesce(fax.cntctphone_phone,''),'-','') like  '%' || _fax_number || '%'
			)
			and COALESCE(provider_ext_part,'' ) like  '%' || _prov_part || '%'		
			order by abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long))
	Unique  (cost=104240.99..104251.49 rows=175 width=365) (actual rows=2582 loops=1)
	  Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, NULL::double precision, NULL::double precision))), phone.cntctphone_phone, fax.cntctphone_phone, provider_ext.provider_ext_part, fgty.case_management_notes_text, 'Physician Practice'::text, provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	  Buffers: shared hit=298597
	  InitPlan 3 (returns $2)
	    ->  Seq Scan on public.crmrole  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	          Output: crmrole.crmrole_id
	          Filter: (crmrole.crmrole_name = 'Physician Practice'::text)
	          Rows Removed by Filter: 37
	          Buffers: shared hit=1
	  InitPlan 5 (returns $4)
	    ->  Seq Scan on public.crmrole crmrole_1  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	          Output: crmrole_1.crmrole_id
	          Filter: (crmrole_1.crmrole_name = 'Scheduling'::text)
	          Rows Removed by Filter: 37
	          Buffers: shared hit=1
	  ->  Sort  (cost=104238.04..104238.47 rows=175 width=365) (actual rows=2582 loops=1)
	        Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, NULL::double precision, NULL::double precision))), phone.cntctphone_phone, fax.cntctphone_phone, provider_ext.provider_ext_part, fgty.case_management_notes_text, 'Physician Practice'::text, provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	        Sort Key: (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, NULL::double precision, NULL::double precision))), crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, phone.cntctphone_phone, fax.cntctphone_phone, provider_ext.provider_ext_part, fgty.case_management_notes_text, provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	        Sort Method: quicksort  Memory: 1490kB
	        Buffers: shared hit=298597
	        ->  Hash Left Join  (cost=96844.82..104231.52 rows=175 width=365) (actual rows=2582 loops=1)
	              Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, NULL::double precision, NULL::double precision)), phone.cntctphone_phone, fax.cntctphone_phone, provider_ext.provider_ext_part, fgty.case_management_notes_text, 'Physician Practice'::text, provider_language_minority.spoken_language, CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END, health_system.health_system_name, array_to_string(doc.doctor_list, ','::text), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), (SubPlan 2)
	              Inner Unique: true
	              Hash Cond: (crmacct.crmacct_id = fgty.case_management_notes_provider_id)
	              Buffers: shared hit=298597
	              ->  Hash Left Join  (cost=96812.42..103097.86 rows=175 width=351) (actual rows=2582 loops=1)
	                    Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, phone.cntctphone_phone, doc.doctor_list, fax.cntctphone_phone, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                    Hash Cond: (crmacctcntctass.crmacctcntctass_cntct_id = fax.cntctphone_cntct_id)
	                    Filter: ((COALESCE(fax.cntctphone_phone, ''::text) ~~ '%'::text) AND (replace(COALESCE(fax.cntctphone_phone, ''::text), '-'::text, ''::text) ~~ '%%'::text))
	                    Buffers: shared hit=275359
	                    ->  Hash Left Join  (cost=84721.92..90657.20 rows=175 width=323) (actual rows=2579 loops=1)
	                          Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, crmacctcntctass.crmacctcntctass_cntct_id, phone.cntctphone_phone, doc.doctor_list, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                          Inner Unique: true
	                          Hash Cond: (crmacct.crmacct_id = doc.crmacctcntctass_crmacct_id)
	                          Filter: (upper(array_to_string(COALESCE(doc.doctor_list, '{}'::text[]), ','::text)) ~ ''::text)
	                          Buffers: shared hit=269265
	                          ->  Hash Left Join  (cost=68946.52..74881.34 rows=175 width=291) (actual rows=2579 loops=1)
	                                Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, crmacctcntctass.crmacctcntctass_cntct_id, phone.cntctphone_phone, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                Hash Cond: (crmacctcntctass.crmacctcntctass_cntct_id = phone.cntctphone_cntct_id)
	                                Filter: ((COALESCE(phone.cntctphone_phone, ''::text) ~~ '%'::text) AND (replace(COALESCE(phone.cntctphone_phone, ''::text), '-'::text, ''::text) ~~ '%%'::text))
	                                Buffers: shared hit=265560
	                                ->  Nested Loop Left Join  (cost=56856.02..62440.67 rows=175 width=259) (actual rows=2576 loops=1)
	                                      Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, crmacctcntctass.crmacctcntctass_cntct_id, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                      Buffers: shared hit=258157
	                                      ->  Hash Left Join  (cost=56855.60..62357.48 rows=175 width=255) (actual rows=2576 loops=1)
	                                            Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                            Hash Cond: (crmacct.crmacct_id = special_instruction.special_instruction_crmacct_id)
	                                            Buffers: shared hit=247808
	                                            ->  Hash Join  (cost=56675.88..62172.05 rows=175 width=254) (actual rows=2576 loops=1)
	                                                  Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority
	                                                  Hash Cond: (provider_language_minority.phy_crmacct_id = crmacctrole.crmacctrole_crmacct_id)
	                                                  Buffers: shared hit=247701
	                                                  ->  Subquery Scan on provider_language_minority  (cost=14067.13..19501.19 rows=6899 width=68) (actual rows=19118 loops=1)
	                                                        Output: provider_language_minority.phy_crmacct_id, provider_language_minority.spoken_language, provider_language_minority.minority
	                                                        Filter: (COALESCE(provider_language_minority.spoken_language, '{English}'::text[]) @> '{}'::text[])
	                                                        Buffers: shared hit=35429
	                                                        ->  Append  (cost=14067.13..19414.95 rows=6899 width=68) (actual rows=19118 loops=1)
	                                                              Buffers: shared hit=35429
	                                                              ->  GroupAggregate  (cost=14067.13..15346.35 rows=200 width=68) (actual rows=12381 loops=1)
	                                                                    Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, array_agg(DISTINCT ((COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)))::text), array_agg(DISTINCT (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false)))
	                                                                    Group Key: crmacctcntctass_1.crmacctcntctass_crmacct_id
	                                                                    Filter: (array_agg(DISTINCT (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))) @> '{f}'::boolean[])
	                                                                    Buffers: shared hit=34487
	                                                                    ->  Unique  (cost=14067.13..14492.37 rows=42524 width=37) (actual rows=12381 loops=1)
	                                                                          Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                                          Buffers: shared hit=34487
	                                                                          ->  Sort  (cost=14067.13..14173.44 rows=42524 width=37) (actual rows=41725 loops=1)
	                                                                                Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                                                Sort Key: crmacctcntctass_1.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                                                Sort Method: quicksort  Memory: 3492kB
	                                                                                Buffers: shared hit=34487
	                                                                                ->  Hash Left Join  (cost=1460.70..10797.88 rows=42524 width=37) (actual rows=41725 loops=1)
	                                                                                      Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying), COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false)
	                                                                                      Inner Unique: true
	                                                                                      Hash Cond: (doctor_spoken_language.doctor_spoken_language_language_id = spoken_languages.spoken_languages_id)
	                                                                                      Buffers: shared hit=34487
	                                                                                      ->  Hash Left Join  (cost=1459.55..10617.52 rows=42524 width=9) (actual rows=41725 loops=1)
	                                                                                            Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, cntct_dr_ext.cntct_dr_ext_minority, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                                            Hash Cond: (crmacctcntctass_1.crmacctcntctass_cntct_id = cntct_dr_ext.cntct_dr_ext_cntct_id)
	                                                                                            Buffers: shared hit=34486
	                                                                                            ->  Merge Join  (cost=4.39..8934.40 rows=42524 width=8) (actual rows=41725 loops=1)
	                                                                                                  Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, crmacctcntctass_1.crmacctcntctass_cntct_id
	                                                                                                  Merge Cond: (crmacctcntctass_1.crmacctcntctass_crmacct_id = crmacctrole_1.crmacctrole_crmacct_id)
	                                                                                                  Buffers: shared hit=34197
	                                                                                                  ->  Index Only Scan using crmacctcntctass_unq on public.crmacctcntctass crmacctcntctass_1  (cost=0.42..4021.32 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                                        Output: crmacctcntctass_1.crmacctcntctass_crmacct_id, crmacctcntctass_1.crmacctcntctass_cntct_id, crmacctcntctass_1.crmacctcntctass_crmrole_id
	                                                                                                        Index Cond: (crmacctcntctass_1.crmacctcntctass_crmrole_id = 23)
	                                                                                                        Heap Fetches: 41725
	                                                                                                        Buffers: shared hit=1079
	                                                                                                  ->  Index Only Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_1  (cost=0.42..3968.96 rows=165829 width=4) (actual rows=92100 loops=1)
	                                                                                                        Output: crmacctrole_1.crmacctrole_crmacct_id
	                                                                                                        Heap Fetches: 92100
	                                                                                                        Buffers: shared hit=33118
	                                                                                            ->  Hash  (cost=1196.49..1196.49 rows=20693 width=9) (actual rows=20693 loops=1)
	                                                                                                  Output: cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_cntct_id, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                                                  Buckets: 32768  Batches: 1  Memory Usage: 1140kB
	                                                                                                  Buffers: shared hit=289
	                                                                                                  ->  Hash Left Join  (cost=554.28..1196.49 rows=20693 width=9) (actual rows=20693 loops=1)
	                                                                                                        Output: cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_cntct_id, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                                                        Hash Cond: (cntct_dr_ext.cntct_dr_ext_cntct_id = doctor_spoken_language.doctor_spoken_language_cntct_id)
	                                                                                                        Buffers: shared hit=289
	                                                                                                        ->  Seq Scan on ww_custom.cntct_dr_ext  (cost=0.00..372.93 rows=20693 width=5) (actual rows=20693 loops=1)
	                                                                                                              Output: cntct_dr_ext.cntct_dr_ext_id, cntct_dr_ext.cntct_dr_ext_cntct_id, cntct_dr_ext.cntct_dr_ext_npi, cntct_dr_ext.cntct_dr_ext_license, cntct_dr_ext.cntct_dr_ext_license_expire, cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_date_inserted, cntct_dr_ext.cntct_dr_ext_date_updated
	                                                                                                              Buffers: shared hit=166
	                                                                                                        ->  Hash  (cost=314.68..314.68 rows=19168 width=8) (actual rows=19168 loops=1)
	                                                                                                              Output: doctor_spoken_language.doctor_spoken_language_language_id, doctor_spoken_language.doctor_spoken_language_cntct_id
	                                                                                                              Buckets: 32768  Batches: 1  Memory Usage: 1005kB
	                                                                                                              Buffers: shared hit=123
	                                                                                                              ->  Seq Scan on ww_custom.doctor_spoken_language  (cost=0.00..314.68 rows=19168 width=8) (actual rows=19168 loops=1)
	                                                                                                                    Output: doctor_spoken_language.doctor_spoken_language_language_id, doctor_spoken_language.doctor_spoken_language_cntct_id
	                                                                                                                    Filter: doctor_spoken_language.doctor_spoken_language_active
	                                                                                                                    Buffers: shared hit=123
	                                                                                      ->  Hash  (cost=1.07..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                                            Output: spoken_languages.spoken_languages_language, spoken_languages.spoken_languages_id
	                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                            Buffers: shared hit=1
	                                                                                            ->  Seq Scan on ww_custom.spoken_languages  (cost=0.00..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                                                  Output: spoken_languages.spoken_languages_language, spoken_languages.spoken_languages_id
	                                                                                                  Buffers: shared hit=1
	                                                              ->  Subquery Scan on "*SELECT* 2"  (cost=3798.64..4066.60 rows=6699 width=68) (actual rows=6737 loops=1)
	                                                                    Output: "*SELECT* 2".phy_crmacct_id, "*SELECT* 2".spoken_language, "*SELECT* 2".minority
	                                                                    Buffers: shared hit=942
	                                                                    ->  GroupAggregate  (cost=3798.64..3999.61 rows=6699 width=68) (actual rows=6737 loops=1)
	                                                                          Output: provider_spoken_language.provider_spoken_language_crmacct_id, array_agg(DISTINCT COALESCE(spoken_languages_1.spoken_languages_language, 'English'::character varying)), array_agg(DISTINCT COALESCE(provider_minority.provider_minority_minority, false))
	                                                                          Group Key: provider_spoken_language.provider_spoken_language_crmacct_id
	                                                                          Filter: (array_agg(DISTINCT COALESCE(provider_minority.provider_minority_minority, false)) @> '{f}'::boolean[])
	                                                                          Buffers: shared hit=942
	                                                                          ->  Sort  (cost=3798.64..3815.39 rows=6699 width=12) (actual rows=6923 loops=1)
	                                                                                Output: provider_spoken_language.provider_spoken_language_crmacct_id, spoken_languages_1.spoken_languages_language, provider_minority.provider_minority_minority
	                                                                                Sort Key: provider_spoken_language.provider_spoken_language_crmacct_id
	                                                                                Sort Method: quicksort  Memory: 517kB
	                                                                                Buffers: shared hit=942
	                                                                                ->  Hash Left Join  (cost=338.54..3372.93 rows=6699 width=12) (actual rows=6923 loops=1)
	                                                                                      Output: provider_spoken_language.provider_spoken_language_crmacct_id, spoken_languages_1.spoken_languages_language, provider_minority.provider_minority_minority
	                                                                                      Inner Unique: true
	                                                                                      Hash Cond: (provider_spoken_language.provider_spoken_language_language_id = spoken_languages_1.spoken_languages_id)
	                                                                                      Buffers: shared hit=942
	                                                                                      ->  Hash Left Join  (cost=337.39..3343.54 rows=6699 width=9) (actual rows=6923 loops=1)
	                                                                                            Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                                            Hash Cond: (crmacctrole_2.crmacctrole_crmacct_id = provider_spoken_language.provider_spoken_language_crmacct_id)
	                                                                                            Buffers: shared hit=941
	                                                                                            ->  Seq Scan on public.crmacctrole crmacctrole_2  (cost=0.00..2969.86 rows=6699 width=4) (actual rows=6799 loops=1)
	                                                                                                  Output: crmacctrole_2.crmacctrole_id, crmacctrole_2.crmacctrole_crmacct_id, crmacctrole_2.crmacctrole_crmrole_id
	                                                                                                  Filter: (crmacctrole_2.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                                                  Rows Removed by Filter: 159030
	                                                                                                  Buffers: shared hit=897
	                                                                                            ->  Hash  (cost=252.40..252.40 rows=6799 width=9) (actual rows=6799 loops=1)
	                                                                                                  Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                                                  Buckets: 8192  Batches: 1  Memory Usage: 330kB
	                                                                                                  Buffers: shared hit=44
	                                                                                                  ->  Hash Right Join  (cost=196.98..252.40 rows=6799 width=9) (actual rows=6799 loops=1)
	                                                                                                        Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                                                        Hash Cond: (provider_minority.provider_minority_crmacct_id = provider_spoken_language.provider_spoken_language_crmacct_id)
	                                                                                                        Buffers: shared hit=44
	                                                                                                        ->  Seq Scan on ww_custom.provider_minority  (cost=0.00..28.10 rows=1810 width=5) (actual rows=0 loops=1)
	                                                                                                              Output: provider_minority.provider_minority_id, provider_minority.provider_minority_crmacct_id, provider_minority.provider_minority_minority, provider_minority.provider_minority_date_inserted, provider_minority.provider_minority_date_updated
	                                                                                                        ->  Hash  (cost=111.99..111.99 rows=6799 width=8) (actual rows=6799 loops=1)
	                                                                                                              Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id
	                                                                                                              Buckets: 8192  Batches: 1  Memory Usage: 330kB
	                                                                                                              Buffers: shared hit=44
	                                                                                                              ->  Seq Scan on ww_custom.provider_spoken_language  (cost=0.00..111.99 rows=6799 width=8) (actual rows=6799 loops=1)
	                                                                                                                    Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id
	                                                                                                                    Buffers: shared hit=44
	                                                                                      ->  Hash  (cost=1.07..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                                            Output: spoken_languages_1.spoken_languages_language, spoken_languages_1.spoken_languages_id
	                                                                                            Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                            Buffers: shared hit=1
	                                                                                            ->  Seq Scan on ww_custom.spoken_languages spoken_languages_1  (cost=0.00..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                                                  Output: spoken_languages_1.spoken_languages_language, spoken_languages_1.spoken_languages_id
	                                                                                                  Buffers: shared hit=1
	                                                  ->  Hash  (cost=42556.95..42556.95 rows=4144 width=194) (actual rows=2656 loops=1)
	                                                        Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name
	                                                        Buckets: 8192  Batches: 1  Memory Usage: 750kB
	                                                        Buffers: shared hit=212272
	                                                        ->  Hash Left Join  (cost=39143.65..42556.95 rows=4144 width=194) (actual rows=2656 loops=1)
	                                                              Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name
	                                                              Inner Unique: true
	                                                              Hash Cond: (provider_ext.provider_ext_health_system_id = health_system.health_system_id)
	                                                              Buffers: shared hit=212272
	                                                              ->  Hash Left Join  (cost=39142.27..42544.67 rows=4144 width=180) (actual rows=2656 loops=1)
	                                                                    Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, provider_ext.provider_ext_health_system_id
	                                                                    Hash Cond: (crmacct.crmacct_id = provider_ext.provider_ext_provider_id)
	                                                                    Filter: (COALESCE(provider_ext.provider_ext_part, ''::text) ~~ '%%'::text)
	                                                                    Buffers: shared hit=212271
	                                                                    ->  Hash Left Join  (cost=38549.60..41930.37 rows=4144 width=174) (actual rows=2656 loops=1)
	                                                                          Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo
	                                                                          Inner Unique: true
	                                                                          Hash Cond: (crmacct.crmacct_id = prov_ppo.provider_ppo_provider_id)
	                                                                          Filter: ((COALESCE(prov_ppo.prov_ppo, '{}'::text[]) @> '{}'::text[]) OR (COALESCE(prov_ppo.prov_ppo, '{}'::text[]) && '{}'::text[]))
	                                                                          Buffers: shared hit=212116
	                                                                          ->  Hash Left Join  (cost=26708.59..30078.49 rows=4144 width=142) (actual rows=2656 loops=1)
	                                                                                Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality
	                                                                                Inner Unique: true
	                                                                                Hash Cond: (crmacct.crmacct_id = prov_speciality.provider_specialities_provider_id)
	                                                                                Filter: ((COALESCE(prov_speciality.prov_speciality, '{}'::text[]) @> '{}'::text[]) OR (COALESCE(prov_speciality.prov_speciality, '{}'::text[]) && '{}'::text[]))
	                                                                                Buffers: shared hit=173471
	                                                                                ->  Hash Join  (cost=15510.40..18869.42 rows=4144 width=110) (actual rows=2656 loops=1)
	                                                                                      Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon
	                                                                                      Inner Unique: true
	                                                                                      Hash Cond: (addr.addr_postalcode = ww_zip_code.ww_zip_code_code)
	                                                                                      Join Filter: ((abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, NULL::double precision, NULL::double precision)) < '0'::double precision) OR (addr.addr_postalcode ~~ '%%'::text))
	                                                                                      Buffers: shared hit=98170
	                                                                                      ->  Hash Join  (cost=13822.87..17171.01 rows=4145 width=90) (actual rows=2677 loops=1)
	                                                                                            Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon
	                                                                                            Inner Unique: true
	                                                                                            Hash Cond: ((SubPlan 4) = addr.addr_id)
	                                                                                            Buffers: shared hit=97657
	                                                                                            ->  Hash Join  (cost=6106.91..9131.19 rows=20727 width=37) (actual rows=12741 loops=1)
	                                                                                                  Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id
	                                                                                                  Inner Unique: true
	                                                                                                  Hash Cond: (crmacctrole.crmacctrole_crmacct_id = crmacct.crmacct_id)
	                                                                                                  Buffers: shared hit=2455
	                                                                                                  ->  Seq Scan on public.crmacctrole  (cost=0.00..2969.86 rows=20729 width=4) (actual rows=12741 loops=1)
	                                                                                                        Output: crmacctrole.crmacctrole_id, crmacctrole.crmacctrole_crmacct_id, crmacctrole.crmacctrole_crmrole_id
	                                                                                                        Filter: (crmacctrole.crmacctrole_crmrole_id = $2)
	                                                                                                        Rows Removed by Filter: 153088
	                                                                                                        Buffers: shared hit=898
	                                                                                                  ->  Hash  (cost=4038.88..4038.88 rows=165442 width=33) (actual rows=165444 loops=1)
	                                                                                                        Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name
	                                                                                                        Buckets: 262144  Batches: 1  Memory Usage: 12663kB
	                                                                                                        Buffers: shared hit=1557
	                                                                                                        ->  Seq Scan on public.crmacct  (cost=0.00..4038.88 rows=165442 width=33) (actual rows=165444 loops=1)
	                                                                                                              Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name
	                                                                                                              Filter: (upper(crmacct.crmacct_name) ~~ '%%'::text)
	                                                                                                              Rows Removed by Filter: 15
	                                                                                                              Buffers: shared hit=1557
	                                                                                            ->  Hash  (cost=7257.32..7257.32 rows=36691 width=57) (actual rows=119405 loops=1)
	                                                                                                  Output: addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, addr.addr_id
	                                                                                                  Buckets: 131072 (originally 65536)  Batches: 1 (originally 1)  Memory Usage: 11197kB
	                                                                                                  Buffers: shared hit=2670
	                                                                                                  ->  Seq Scan on public.addr  (cost=0.00..7257.32 rows=36691 width=57) (actual rows=119405 loops=1)
	                                                                                                        Output: addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, addr.addr_id
	                                                                                                        Filter: ((upper(addr.addr_line1) ~~ '%%'::text) AND (upper(addr.addr_city) ~~ '%%'::text) AND (upper(addr.addr_state) ~~ '%PA%'::text))
	                                                                                                        Rows Removed by Filter: 64088
	                                                                                                        Buffers: shared hit=2670
	                                                                                            SubPlan 4
	                                                                                              ->  Result  (cost=0.00..0.26 rows=1 width=4) (actual rows=1 loops=15418)
	                                                                                                    Output: ww_custom.get_panel_primary_address(crmacct.crmacct_id)
	                                                                                                    Buffers: shared hit=92532
	                                                                                      ->  Hash  (cost=1153.68..1153.68 rows=42708 width=26) (actual rows=42712 loops=1)
	                                                                                            Output: ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, ww_zip_code.ww_zip_code_code
	                                                                                            Buckets: 65536  Batches: 1  Memory Usage: 3027kB
	                                                                                            Buffers: shared hit=513
	                                                                                            ->  Seq Scan on ww_custom.ww_zip_code  (cost=0.00..1153.68 rows=42708 width=26) (actual rows=42712 loops=1)
	                                                                                                  Output: ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, ww_zip_code.ww_zip_code_code
	                                                                                                  Filter: (upper(ww_zip_code.ww_zip_code_county) ~~ '%%'::text)
	                                                                                                  Buffers: shared hit=513
	                                                                                ->  Hash  (cost=11195.69..11195.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                      Output: prov_speciality.prov_speciality, prov_speciality.provider_specialities_provider_id
	                                                                                      Buckets: 32768 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 1629kB
	                                                                                      Buffers: shared hit=75301
	                                                                                      ->  Subquery Scan on prov_speciality  (cost=11075.87..11195.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                            Output: prov_speciality.prov_speciality, prov_speciality.provider_specialities_provider_id
	                                                                                            Buffers: shared hit=75301
	                                                                                            ->  GroupAggregate  (cost=11075.87..11193.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                                  Output: provider_specialities.provider_specialities_provider_id, array_agg(DISTINCT provider_specialities.provider_specialities_code)
	                                                                                                  Group Key: provider_specialities.provider_specialities_provider_id
	                                                                                                  Buffers: shared hit=75301
	                                                                                                  ->  Merge Append  (cost=11075.87..11168.76 rows=4487 width=7) (actual rows=31775 loops=1)
	                                                                                                        Sort Key: provider_specialities.provider_specialities_provider_id
	                                                                                                        Buffers: shared hit=75301
	                                                                                                        ->  Sort  (cost=2567.87..2571.08 rows=1286 width=7) (actual rows=14290 loops=1)
	                                                                                                              Output: provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code
	                                                                                                              Sort Key: provider_specialities.provider_specialities_provider_id
	                                                                                                              Sort Method: quicksort  Memory: 1054kB
	                                                                                                              Buffers: shared hit=72696
	                                                                                                              ->  Merge Join  (cost=5.96..2488.60 rows=1286 width=7) (actual rows=14290 loops=1)
	                                                                                                                    Output: provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code
	                                                                                                                    Merge Cond: (provider_specialities.provider_specialities_provider_id = crmacctrole_3.crmacctrole_crmacct_id)
	                                                                                                                    Buffers: shared hit=72696
	                                                                                                                    ->  Index Scan using provider_specialities_provider_id_idx on ww_custom.provider_specialities  (cost=0.29..758.40 rows=31286 width=7) (actual rows=31286 loops=1)
	                                                                                                                          Output: provider_specialities.provider_specialities_id, provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code, provider_specialities.provider_specialities_active, provider_specialities.provider_specialities_expires, provider_specialities.provider_specialities_date_inserted, provider_specialities.provider_specialities_date_updated
	                                                                                                                          Buffers: shared hit=3107
	                                                                                                                    ->  Index Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_3  (cost=0.42..4383.53 rows=6699 width=4) (actual rows=14301 loops=1)
	                                                                                                                          Output: crmacctrole_3.crmacctrole_id, crmacctrole_3.crmacctrole_crmacct_id, crmacctrole_3.crmacctrole_crmrole_id
	                                                                                                                          Filter: (crmacctrole_3.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                                                                          Rows Removed by Filter: 526223
	                                                                                                                          Buffers: shared hit=69589
	                                                                                                        ->  Unique  (cost=8507.99..8532.00 rows=3201 width=7) (actual rows=17485 loops=1)
	                                                                                                              Output: crmacctrole_4.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                              Buffers: shared hit=2605
	                                                                                                              ->  Sort  (cost=8507.99..8515.99 rows=3201 width=7) (actual rows=42592 loops=1)
	                                                                                                                    Output: crmacctrole_4.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                    Sort Key: crmacctrole_4.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                    Sort Method: quicksort  Memory: 3533kB
	                                                                                                                    Buffers: shared hit=2605
	                                                                                                                    ->  Hash Left Join  (cost=3621.29..8321.62 rows=3201 width=7) (actual rows=42592 loops=1)
	                                                                                                                          Output: crmacctrole_4.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                          Inner Unique: true
	                                                                                                                          Hash Cond: (doctor_specialities.doctor_specialities_specialities_code = speciality.speciality_id)
	                                                                                                                          Buffers: shared hit=2605
	                                                                                                                          ->  Hash Left Join  (cost=3618.61..8310.11 rows=3201 width=8) (actual rows=42592 loops=1)
	                                                                                                                                Output: crmacctrole_4.crmacctrole_crmacct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                Hash Cond: (crmacctcntctass_2.crmacctcntctass_cntct_id = doctor_specialities.doctor_specialities_cntct_id)
	                                                                                                                                Buffers: shared hit=2604
	                                                                                                                                ->  Hash Join  (cost=3125.88..7795.77 rows=3201 width=8) (actual rows=41725 loops=1)
	                                                                                                                                      Output: crmacctrole_4.crmacctrole_crmacct_id, crmacctcntctass_2.crmacctcntctass_cntct_id
	                                                                                                                                      Hash Cond: (crmacctcntctass_2.crmacctcntctass_crmacct_id = crmacctrole_4.crmacctrole_crmacct_id)
	                                                                                                                                      Buffers: shared hit=2481
	                                                                                                                                      ->  Seq Scan on public.crmacctcntctass crmacctcntctass_2  (cost=0.00..3958.88 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                                                                            Output: crmacctcntctass_2.crmacctcntctass_id, crmacctcntctass_2.crmacctcntctass_crmacct_id, crmacctcntctass_2.crmacctcntctass_cntct_id, crmacctcntctass_2.crmacctcntctass_crmrole_id, crmacctcntctass_2.crmacctcntctass_active, crmacctcntctass_2.crmacctcntctass_default, crmacctcntctass_2.crmacctcntctass_createdby, crmacctcntctass_2.crmacctcntctass_created, crmacctcntctass_2.crmacctcntctass_lastupdated
	                                                                                                                                            Filter: (crmacctcntctass_2.crmacctcntctass_crmrole_id = 23)
	                                                                                                                                            Rows Removed by Filter: 148265
	                                                                                                                                            Buffers: shared hit=1584
	                                                                                                                                      ->  Hash  (cost=2969.86..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                            Output: crmacctrole_4.crmacctrole_crmacct_id
	                                                                                                                                            Buckets: 16384  Batches: 1  Memory Usage: 576kB
	                                                                                                                                            Buffers: shared hit=897
	                                                                                                                                            ->  Seq Scan on public.crmacctrole crmacctrole_4  (cost=0.00..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                                  Output: crmacctrole_4.crmacctrole_crmacct_id
	                                                                                                                                                  Filter: (crmacctrole_4.crmacctrole_crmrole_id = 22)
	                                                                                                                                                  Rows Removed by Filter: 153088
	                                                                                                                                                  Buffers: shared hit=897
	                                                                                                                                ->  Hash  (cost=412.37..412.37 rows=6430 width=8) (actual rows=19291 loops=1)
	                                                                                                                                      Output: doctor_specialities.doctor_specialities_cntct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                      Buckets: 32768 (originally 8192)  Batches: 1 (originally 1)  Memory Usage: 1010kB
	                                                                                                                                      Buffers: shared hit=123
	                                                                                                                                      ->  Seq Scan on ww_custom.doctor_specialities  (cost=0.00..412.37 rows=6430 width=8) (actual rows=19291 loops=1)
	                                                                                                                                            Output: doctor_specialities.doctor_specialities_cntct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                            Filter: (doctor_specialities.doctor_specialities_active AND (COALESCE(doctor_specialities.doctor_specialities_expires, '2100-12-31'::date) > CURRENT_DATE))
	                                                                                                                                            Buffers: shared hit=123
	                                                                                                                          ->  Hash  (cost=2.03..2.03 rows=52 width=7) (actual rows=52 loops=1)
	                                                                                                                                Output: speciality.speciality_code, speciality.speciality_id
	                                                                                                                                Buckets: 1024  Batches: 1  Memory Usage: 11kB
	                                                                                                                                Buffers: shared hit=1
	                                                                                                                                ->  Seq Scan on ww_custom.speciality  (cost=0.00..2.03 rows=52 width=7) (actual rows=52 loops=1)
	                                                                                                                                      Output: speciality.speciality_code, speciality.speciality_id
	                                                                                                                                      Filter: (speciality.speciality_role = 'Physician Practice'::text)
	                                                                                                                                      Rows Removed by Filter: 30
	                                                                                                                                      Buffers: shared hit=1
	                                                                          ->  Hash  (cost=11838.51..11838.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                Output: prov_ppo.prov_ppo, prov_ppo.provider_ppo_provider_id
	                                                                                Buckets: 32768 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 1868kB
	                                                                                Buffers: shared hit=38645
	                                                                                ->  Subquery Scan on prov_ppo  (cost=11720.70..11838.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                      Output: prov_ppo.prov_ppo, prov_ppo.provider_ppo_provider_id
	                                                                                      Buffers: shared hit=38645
	                                                                                      ->  GroupAggregate  (cost=11720.70..11836.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                            Output: provider_ppo.provider_ppo_provider_id, array_agg(DISTINCT ppo.ppo_name)
	                                                                                            Group Key: provider_ppo.provider_ppo_provider_id
	                                                                                            Buffers: shared hit=38645
	                                                                                            ->  Merge Append  (cost=11720.70..11812.24 rows=4353 width=13) (actual rows=45517 loops=1)
	                                                                                                  Sort Key: provider_ppo.provider_ppo_provider_id
	                                                                                                  Buffers: shared hit=38645
	                                                                                                  ->  Sort  (cost=2493.41..2496.29 rows=1152 width=13) (actual rows=5369 loops=1)
	                                                                                                        Output: provider_ppo.provider_ppo_provider_id, ppo.ppo_name
	                                                                                                        Sort Key: provider_ppo.provider_ppo_provider_id
	                                                                                                        Sort Method: quicksort  Memory: 445kB
	                                                                                                        Buffers: shared hit=35870
	                                                                                                        ->  Hash Join  (cost=7.25..2423.31 rows=1152 width=13) (actual rows=5369 loops=1)
	                                                                                                              Output: provider_ppo.provider_ppo_provider_id, ppo.ppo_name
	                                                                                                              Inner Unique: true
	                                                                                                              Hash Cond: (provider_ppo.provider_ppo_code = ppo.ppo_id)
	                                                                                                              Buffers: shared hit=35870
	                                                                                                              ->  Merge Join  (cost=5.96..2418.01 rows=1152 width=8) (actual rows=5369 loops=1)
	                                                                                                                    Output: provider_ppo.provider_ppo_provider_id, provider_ppo.provider_ppo_code
	                                                                                                                    Merge Cond: (provider_ppo.provider_ppo_provider_id = crmacctrole_5.crmacctrole_crmacct_id)
	                                                                                                                    Buffers: shared hit=35869
	                                                                                                                    ->  Index Scan using provider_ppo_provider_id_idx on ww_custom.provider_ppo  (cost=0.29..697.29 rows=28032 width=8) (actual rows=28032 loops=1)
	                                                                                                                          Output: provider_ppo.provider_ppo_id, provider_ppo.provider_ppo_provider_id, provider_ppo.provider_ppo_code, provider_ppo.provider_ppo_active, provider_ppo.provider_ppo_expires, provider_ppo.provider_ppo_date_inserted, provider_ppo.provider_ppo_date_updated
	                                                                                                                          Buffers: shared hit=2719
	                                                                                                                    ->  Index Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_5  (cost=0.42..4383.53 rows=6699 width=4) (actual rows=6818 loops=1)
	                                                                                                                          Output: crmacctrole_5.crmacctrole_id, crmacctrole_5.crmacctrole_crmacct_id, crmacctrole_5.crmacctrole_crmrole_id
	                                                                                                                          Filter: (crmacctrole_5.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                                                                          Rows Removed by Filter: 56141
	                                                                                                                          Buffers: shared hit=33150
	                                                                                                              ->  Hash  (cost=1.13..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                    Output: ppo.ppo_name, ppo.ppo_id
	                                                                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                                                    Buffers: shared hit=1
	                                                                                                                    ->  Seq Scan on ww_custom.ppo  (cost=0.00..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                          Output: ppo.ppo_name, ppo.ppo_id
	                                                                                                                          Buffers: shared hit=1
	                                                                                                  ->  Unique  (cost=9227.27..9251.28 rows=3201 width=13) (actual rows=40148 loops=1)
	                                                                                                        Output: crmacctrole_6.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                        Buffers: shared hit=2775
	                                                                                                        ->  Sort  (cost=9227.27..9235.28 rows=3201 width=13) (actual rows=99922 loops=1)
	                                                                                                              Output: crmacctrole_6.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                              Sort Key: crmacctrole_6.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                              Sort Method: quicksort  Memory: 8251kB
	                                                                                                              Buffers: shared hit=2775
	                                                                                                              ->  Hash Left Join  (cost=4300.05..9040.91 rows=3201 width=13) (actual rows=99922 loops=1)
	                                                                                                                    Output: crmacctrole_6.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                                    Inner Unique: true
	                                                                                                                    Hash Cond: (doctor_ppo.doctor_ppo_code = ppo_1.ppo_id)
	                                                                                                                    Buffers: shared hit=2775
	                                                                                                                    ->  Hash Left Join  (cost=4298.75..9028.47 rows=3201 width=8) (actual rows=99922 loops=1)
	                                                                                                                          Output: crmacctrole_6.crmacctrole_crmacct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                          Hash Cond: (crmacctcntctass_3.crmacctcntctass_cntct_id = doctor_ppo.doctor_ppo_cntct_id)
	                                                                                                                          Buffers: shared hit=2774
	                                                                                                                          ->  Hash Join  (cost=3125.88..7795.77 rows=3201 width=8) (actual rows=41725 loops=1)
	                                                                                                                                Output: crmacctrole_6.crmacctrole_crmacct_id, crmacctcntctass_3.crmacctcntctass_cntct_id
	                                                                                                                                Hash Cond: (crmacctcntctass_3.crmacctcntctass_crmacct_id = crmacctrole_6.crmacctrole_crmacct_id)
	                                                                                                                                Buffers: shared hit=2481
	                                                                                                                                ->  Seq Scan on public.crmacctcntctass crmacctcntctass_3  (cost=0.00..3958.88 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                                                                      Output: crmacctcntctass_3.crmacctcntctass_id, crmacctcntctass_3.crmacctcntctass_crmacct_id, crmacctcntctass_3.crmacctcntctass_cntct_id, crmacctcntctass_3.crmacctcntctass_crmrole_id, crmacctcntctass_3.crmacctcntctass_active, crmacctcntctass_3.crmacctcntctass_default, crmacctcntctass_3.crmacctcntctass_createdby, crmacctcntctass_3.crmacctcntctass_created, crmacctcntctass_3.crmacctcntctass_lastupdated
	                                                                                                                                      Filter: (crmacctcntctass_3.crmacctcntctass_crmrole_id = 23)
	                                                                                                                                      Rows Removed by Filter: 148265
	                                                                                                                                      Buffers: shared hit=1584
	                                                                                                                                ->  Hash  (cost=2969.86..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                      Output: crmacctrole_6.crmacctrole_crmacct_id
	                                                                                                                                      Buckets: 16384  Batches: 1  Memory Usage: 576kB
	                                                                                                                                      Buffers: shared hit=897
	                                                                                                                                      ->  Seq Scan on public.crmacctrole crmacctrole_6  (cost=0.00..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                            Output: crmacctrole_6.crmacctrole_crmacct_id
	                                                                                                                                            Filter: (crmacctrole_6.crmacctrole_crmrole_id = 22)
	                                                                                                                                            Rows Removed by Filter: 153088
	                                                                                                                                            Buffers: shared hit=897
	                                                                                                                          ->  Hash  (cost=981.61..981.61 rows=15302 width=8) (actual rows=45907 loops=1)
	                                                                                                                                Output: doctor_ppo.doctor_ppo_cntct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                                Buckets: 65536 (originally 16384)  Batches: 1 (originally 1)  Memory Usage: 2306kB
	                                                                                                                                Buffers: shared hit=293
	                                                                                                                                ->  Seq Scan on ww_custom.doctor_ppo  (cost=0.00..981.61 rows=15302 width=8) (actual rows=45907 loops=1)
	                                                                                                                                      Output: doctor_ppo.doctor_ppo_cntct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                                      Filter: (doctor_ppo.doctor_ppo_active AND (COALESCE(doctor_ppo.doctor_ppo_expires, '2100-12-31'::date) > CURRENT_DATE))
	                                                                                                                                      Buffers: shared hit=293
	                                                                                                                    ->  Hash  (cost=1.13..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                          Output: ppo_1.ppo_name, ppo_1.ppo_id
	                                                                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                                                          Buffers: shared hit=1
	                                                                                                                          ->  Seq Scan on ww_custom.ppo ppo_1  (cost=0.00..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                                Output: ppo_1.ppo_name, ppo_1.ppo_id
	                                                                                                                                Buffers: shared hit=1
	                                                                    ->  Hash  (cost=349.52..349.52 rows=19452 width=10) (actual rows=19452 loops=1)
	                                                                          Output: provider_ext.provider_ext_part, provider_ext.provider_ext_provider_id, provider_ext.provider_ext_health_system_id
	                                                                          Buckets: 32768  Batches: 1  Memory Usage: 967kB
	                                                                          Buffers: shared hit=155
	                                                                          ->  Seq Scan on ww_custom.provider_ext  (cost=0.00..349.52 rows=19452 width=10) (actual rows=19452 loops=1)
	                                                                                Output: provider_ext.provider_ext_part, provider_ext.provider_ext_provider_id, provider_ext.provider_ext_health_system_id
	                                                                                Buffers: shared hit=155
	                                                              ->  Hash  (cost=1.17..1.17 rows=17 width=20) (actual rows=17 loops=1)
	                                                                    Output: health_system.health_system_name, health_system.health_system_id
	                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                    Buffers: shared hit=1
	                                                                    ->  Seq Scan on ww_custom.health_system  (cost=0.00..1.17 rows=17 width=20) (actual rows=17 loops=1)
	                                                                          Output: health_system.health_system_name, health_system.health_system_id
	                                                                          Buffers: shared hit=1
	                                            ->  Hash  (cost=177.71..177.71 rows=161 width=5) (actual rows=161 loops=1)
	                                                  Output: special_instruction.special_instruction_crmacct_id, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                                  Buckets: 1024  Batches: 1  Memory Usage: 14kB
	                                                  Buffers: shared hit=107
	                                                  ->  Nested Loop  (cost=0.00..177.71 rows=161 width=5) (actual rows=161 loops=1)
	                                                        Output: special_instruction.special_instruction_crmacct_id, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                                        Buffers: shared hit=107
	                                                        ->  Seq Scan on ww_custom.special_instruction_category  (cost=0.00..1.61 rows=1 width=4) (actual rows=1 loops=1)
	                                                              Output: special_instruction_category.special_instruction_category_id, special_instruction_category.special_instruction_category_group_id, special_instruction_category.special_instruction_category_desc, special_instruction_category.special_instruction_category_active, special_instruction_category.special_instruction_category_expires, special_instruction_category.special_instruction_category_has_values, special_instruction_category.special_instruction_category_ord, special_instruction_category.special_instruction_category_date_updated, special_instruction_category.special_instruction_category_updated_by
	                                                              Filter: (special_instruction_category.special_instruction_category_id = 92)
	                                                              Rows Removed by Filter: 48
	                                                              Buffers: shared hit=1
	                                                        ->  Seq Scan on ww_custom.special_instruction  (cost=0.00..174.49 rows=161 width=9) (actual rows=161 loops=1)
	                                                              Output: special_instruction.special_instruction_category_category_id, special_instruction.special_instruction_crmacct_id, CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END
	                                                              Filter: (special_instruction.special_instruction_category_category_id = 92)
	                                                              Rows Removed by Filter: 5286
	                                                              Buffers: shared hit=106
	                                      ->  Index Only Scan using crmacctcntctass_unq on public.crmacctcntctass  (cost=0.42..0.47 rows=1 width=8) (actual rows=1 loops=2576)
	                                            Output: crmacctcntctass.crmacctcntctass_crmacct_id, crmacctcntctass.crmacctcntctass_cntct_id, crmacctcntctass.crmacctcntctass_crmrole_id
	                                            Index Cond: ((crmacctcntctass.crmacctcntctass_crmacct_id = crmacct.crmacct_id) AND (crmacctcntctass.crmacctcntctass_crmrole_id = $4))
	                                            Heap Fetches: 2576
	                                            Buffers: shared hit=10348
	                                ->  Hash  (cost=11890.93..11890.93 rows=15966 width=36) (actual rows=28725 loops=1)
	                                      Output: phone.cntctphone_phone, phone.cntctphone_cntct_id
	                                      Buckets: 32768 (originally 16384)  Batches: 1 (originally 1)  Memory Usage: 1715kB
	                                      Buffers: shared hit=7403
	                                      ->  Subquery Scan on phone  (cost=11571.61..11890.93 rows=15966 width=36) (actual rows=28725 loops=1)
	                                            Output: phone.cntctphone_phone, phone.cntctphone_cntct_id
	                                            Buffers: shared hit=7403
	                                            ->  HashAggregate  (cost=11571.61..11731.27 rows=15966 width=36) (actual rows=28725 loops=1)
	                                                  Output: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                  Group Key: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                  Buffers: shared hit=7403
	                                                  ->  Append  (cost=1.48..11491.78 rows=15966 width=36) (actual rows=28725 loops=1)
	                                                        Buffers: shared hit=7403
	                                                        ->  Seq Scan on public.cntctphone  (cost=1.48..3688.25 rows=335 width=16) (actual rows=529 loops=1)
	                                                              Output: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                              Filter: ((cntctphone.cntctphone_phone ~~ '800-%'::text) AND (cntctphone.cntctphone_crmrole_id = $8))
	                                                              Rows Removed by Filter: 157456
	                                                              Buffers: shared hit=1318
	                                                              InitPlan 9 (returns $8)
	                                                                ->  Seq Scan on public.crmrole crmrole_4  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                      Output: crmrole_4.crmrole_id
	                                                                      Filter: (crmrole_4.crmrole_name = 'Office'::text)
	                                                                      Rows Removed by Filter: 37
	                                                                      Buffers: shared hit=1
	                                                        ->  Index Only Scan using cntctphone_unq on public.cntctphone cntctphone_1  (cost=3690.98..7643.87 rows=15631 width=16) (actual rows=28196 loops=1)
	                                                              Output: cntctphone_1.cntctphone_cntct_id, cntctphone_1.cntctphone_phone
	                                                              Index Cond: (cntctphone_1.cntctphone_crmrole_id = $5)
	                                                              Filter: ((cntctphone_1.cntctphone_phone !~~ '800-%'::text) AND (NOT (hashed SubPlan 8)))
	                                                              Rows Removed by Filter: 551
	                                                              Heap Fetches: 28747
	                                                              Buffers: shared hit=6085
	                                                              InitPlan 6 (returns $5)
	                                                                ->  Seq Scan on public.crmrole crmrole_2  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                      Output: crmrole_2.crmrole_id
	                                                                      Filter: (crmrole_2.crmrole_name = 'Office'::text)
	                                                                      Rows Removed by Filter: 37
	                                                                      Buffers: shared hit=1
	                                                              SubPlan 8
	                                                                ->  Seq Scan on public.cntctphone cntctphone_4  (cost=1.48..3688.25 rows=335 width=4) (actual rows=529 loops=1)
	                                                                      Output: cntctphone_4.cntctphone_cntct_id
	                                                                      Filter: ((cntctphone_4.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_4.cntctphone_crmrole_id = $6))
	                                                                      Rows Removed by Filter: 157456
	                                                                      Buffers: shared hit=1318
	                                                                      InitPlan 7 (returns $6)
	                                                                        ->  Seq Scan on public.crmrole crmrole_3  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                              Output: crmrole_3.crmrole_id
	                                                                              Filter: (crmrole_3.crmrole_name = 'Office'::text)
	                                                                              Rows Removed by Filter: 37
	                                                                              Buffers: shared hit=1
	                          ->  Hash  (cost=15320.98..15320.98 rows=36353 width=36) (actual rows=12381 loops=1)
	                                Output: doc.doctor_list, doc.crmacctcntctass_crmacct_id
	                                Buckets: 65536  Batches: 1  Memory Usage: 2176kB
	                                Buffers: shared hit=3705
	                                ->  Subquery Scan on doc  (cost=14189.68..15320.98 rows=36353 width=36) (actual rows=12381 loops=1)
	                                      Output: doc.doctor_list, doc.crmacctcntctass_crmacct_id
	                                      Buffers: shared hit=3705
	                                      ->  GroupAggregate  (cost=14189.68..14957.45 rows=36353 width=36) (actual rows=12381 loops=1)
	                                            Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, array_agg(cntct.cntct_name)
	                                            Group Key: crmacctcntctass_4.crmacctcntctass_crmacct_id
	                                            Buffers: shared hit=3705
	                                            ->  Sort  (cost=14189.68..14294.13 rows=41781 width=21) (actual rows=41725 loops=1)
	                                                  Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, cntct.cntct_name
	                                                  Sort Key: crmacctcntctass_4.crmacctcntctass_crmacct_id
	                                                  Sort Method: quicksort  Memory: 4792kB
	                                                  Buffers: shared hit=3705
	                                                  ->  Hash Join  (cost=6914.31..10982.87 rows=41781 width=21) (actual rows=41725 loops=1)
	                                                        Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, cntct.cntct_name
	                                                        Inner Unique: true
	                                                        Hash Cond: (crmacctcntctass_4.crmacctcntctass_cntct_id = cntct.cntct_id)
	                                                        Buffers: shared hit=3705
	                                                        ->  Seq Scan on public.crmacctcntctass crmacctcntctass_4  (cost=0.00..3958.88 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                              Output: crmacctcntctass_4.crmacctcntctass_id, crmacctcntctass_4.crmacctcntctass_crmacct_id, crmacctcntctass_4.crmacctcntctass_cntct_id, crmacctcntctass_4.crmacctcntctass_crmrole_id, crmacctcntctass_4.crmacctcntctass_active, crmacctcntctass_4.crmacctcntctass_default, crmacctcntctass_4.crmacctcntctass_createdby, crmacctcntctass_4.crmacctcntctass_created, crmacctcntctass_4.crmacctcntctass_lastupdated
	                                                              Filter: (crmacctcntctass_4.crmacctcntctass_active AND (crmacctcntctass_4.crmacctcntctass_crmrole_id = 23))
	                                                              Rows Removed by Filter: 148265
	                                                              Buffers: shared hit=1584
	                                                        ->  Hash  (cost=4735.65..4735.65 rows=174293 width=21) (actual rows=174310 loops=1)
	                                                              Output: cntct.cntct_name, cntct.cntct_id
	                                                              Buckets: 262144  Batches: 1  Memory Usage: 11451kB
	                                                              Buffers: shared hit=2121
	                                                              ->  Seq Scan on public.cntct  (cost=0.00..4735.65 rows=174293 width=21) (actual rows=174310 loops=1)
	                                                                    Output: cntct.cntct_name, cntct.cntct_id
	                                                                    Filter: (upper(cntct.cntct_name) ~ ''::text)
	                                                                    Buffers: shared hit=2121
	                    ->  Hash  (cost=11890.93..11890.93 rows=15966 width=36) (actual rows=18101 loops=1)
	                          Output: fax.cntctphone_phone, fax.cntctphone_cntct_id
	                          Buckets: 32768 (originally 16384)  Batches: 1 (originally 1)  Memory Usage: 1176kB
	                          Buffers: shared hit=6094
	                          ->  Subquery Scan on fax  (cost=11571.61..11890.93 rows=15966 width=36) (actual rows=18101 loops=1)
	                                Output: fax.cntctphone_phone, fax.cntctphone_cntct_id
	                                Buffers: shared hit=6094
	                                ->  HashAggregate  (cost=11571.61..11731.27 rows=15966 width=36) (actual rows=18101 loops=1)
	                                      Output: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                      Group Key: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                      Buffers: shared hit=6094
	                                      ->  Append  (cost=1.48..11491.78 rows=15966 width=36) (actual rows=18101 loops=1)
	                                            Buffers: shared hit=6094
	                                            ->  Seq Scan on public.cntctphone cntctphone_2  (cost=1.48..3688.25 rows=335 width=16) (actual rows=16 loops=1)
	                                                  Output: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                                  Filter: ((cntctphone_2.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_2.cntctphone_crmrole_id = $12))
	                                                  Rows Removed by Filter: 157969
	                                                  Buffers: shared hit=1318
	                                                  InitPlan 13 (returns $12)
	                                                    ->  Seq Scan on public.crmrole crmrole_7  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                          Output: crmrole_7.crmrole_id
	                                                          Filter: (crmrole_7.crmrole_name = 'Fax'::text)
	                                                          Rows Removed by Filter: 37
	                                                          Buffers: shared hit=1
	                                            ->  Index Only Scan using cntctphone_unq on public.cntctphone cntctphone_3  (cost=3690.98..7643.87 rows=15631 width=16) (actual rows=18085 loops=1)
	                                                  Output: cntctphone_3.cntctphone_cntct_id, cntctphone_3.cntctphone_phone
	                                                  Index Cond: (cntctphone_3.cntctphone_crmrole_id = $9)
	                                                  Filter: ((cntctphone_3.cntctphone_phone !~~ '800-%'::text) AND (NOT (hashed SubPlan 12)))
	                                                  Rows Removed by Filter: 17
	                                                  Heap Fetches: 18102
	                                                  Buffers: shared hit=4776
	                                                  InitPlan 10 (returns $9)
	                                                    ->  Seq Scan on public.crmrole crmrole_5  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                          Output: crmrole_5.crmrole_id
	                                                          Filter: (crmrole_5.crmrole_name = 'Fax'::text)
	                                                          Rows Removed by Filter: 37
	                                                          Buffers: shared hit=1
	                                                  SubPlan 12
	                                                    ->  Seq Scan on public.cntctphone cntctphone_5  (cost=1.48..3688.25 rows=335 width=4) (actual rows=16 loops=1)
	                                                          Output: cntctphone_5.cntctphone_cntct_id
	                                                          Filter: ((cntctphone_5.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_5.cntctphone_crmrole_id = $10))
	                                                          Rows Removed by Filter: 157969
	                                                          Buffers: shared hit=1318
	                                                          InitPlan 11 (returns $10)
	                                                            ->  Seq Scan on public.crmrole crmrole_6  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                  Output: crmrole_6.crmrole_id
	                                                                  Filter: (crmrole_6.crmrole_name = 'Fax'::text)
	                                                                  Rows Removed by Filter: 37
	                                                                  Buffers: shared hit=1
	              ->  Hash  (cost=29.90..29.90 rows=200 width=36) (actual rows=0 loops=1)
	                    Output: fgty.case_management_notes_text, fgty.case_management_notes_provider_id
	                    Buckets: 1024  Batches: 1  Memory Usage: 8kB
	                    ->  Subquery Scan on fgty  (cost=25.40..29.90 rows=200 width=36) (actual rows=0 loops=1)
	                          Output: fgty.case_management_notes_text, fgty.case_management_notes_provider_id
	                          ->  HashAggregate  (cost=25.40..27.90 rows=200 width=36) (actual rows=0 loops=1)
	                                Output: case_management_notes.case_management_notes_provider_id, string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)
	                                Group Key: case_management_notes.case_management_notes_provider_id
	                                ->  Seq Scan on ww_custom.case_management_notes  (cost=0.00..17.70 rows=770 width=68) (actual rows=0 loops=1)
	                                      Output: case_management_notes.case_management_notes_id, case_management_notes.case_management_notes_provider_id, case_management_notes.case_management_notes_department, case_management_notes.case_management_notes_text, case_management_notes.case_management_notes_active, case_management_notes.case_management_notes_expires
	              SubPlan 2
	                ->  Result  (cost=5.77..6.03 rows=1 width=1) (actual rows=1 loops=2582)
	                      Output: ww_custom.donotoperate($1)
	                      Buffers: shared hit=23238
	                      InitPlan 1 (returns $1)
	                        ->  Bitmap Heap Scan on public.state  (cost=1.84..5.77 rows=1 width=4) (actual rows=1 loops=2582)
	                              Output: state.state_id
	                              Recheck Cond: (state.state_country_id = 230)
	                              Filter: (state.state_abbr = addr.addr_state)
	                              Rows Removed by Filter: 61
	                              Heap Blocks: exact=2582
	                              Buffers: shared hit=7746
	                              ->  Bitmap Index Scan on state_state_country_id_key  (cost=0.00..1.84 rows=62 width=0) (actual rows=62 loops=2582)
	                                    Index Cond: (state.state_country_id = 230)
	                                    Buffers: shared hit=5164
2021-01-12 17:52:55 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] CONTEXT:  PL/pgSQL function ww_custom.network_search_1(text,text[],text[],text,text,text,text,text,text,text,text,text,text,integer,text,text[],boolean,integer,text) line 73 at RETURN QUERY

2021-01-12 17:52:55 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] LOG:  duration: 2214.808 ms  plan:
	Query Text: SELECT * from ww_custom.network_search_1(
	'Physician Practice',
	'{}',         
	'{}',         
	'',           
	'',           
	'',           
	'PA',         
	'',           
	'',           
	'',           
	'',           
	'',           
	'',           
	0,            
	'',           
	'{}',         
	false,        
	0    ,        
	''            
	);
	Function Scan on ww_custom.network_search_1  (cost=0.25..10.25 rows=1000 width=623) (actual rows=2582 loops=1)
	  Output: network_search_result_id, network_search_result_number, network_search_result_name, network_search_result_addr_line1, network_search_result_addr_line2, network_search_result_addr_line3, network_search_result_addr_city, network_search_result_addr_state, network_search_result_addr_zip, network_search_result_addr_county, network_search_result_speciality, network_search_result_ppo, network_search_result_distance, network_search_result_phone, network_search_result_fax, network_search_result_type, network_search_results_notes, network_search_result_role, network_search_result_language, network_search_result_minority, network_search_result_health_system, network_search_doctors, network_search_do_not_use, network_search_do_not_operate
	  Function Call: ww_custom.network_search_1('Physician Practice'::text, '{}'::text[], '{}'::text[], ''::text, ''::text, ''::text, 'PA'::text, ''::text, ''::text, ''::text, ''::text, ''::text, ''::text, 0, ''::text, '{}'::text[], false, 0, ''::text)
	  Buffers: shared hit=298823






#####################################
##    SIXTH EXECUTION
#####################################

2021-01-12 17:56:23 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] LOG:  duration: 208764.880 ms  plan:
	Query Text: select 	DISTINCT
			crmacct_id::integer,crmacct_number::text, crmacct_name::text,
			addr_line1::text,addr_line2::text,addr_line3::text,addr_city::text,addr_state::text,addr_postalcode::text,ww_zip_code_county::text,
			prov_speciality::text[],
			prov_ppo::text[],
			abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long)) dist,
			phone.cntctphone_phone phone, fax.cntctphone_phone fax,provider_ext_part,
			case_management_notes_text network_search_results_notes,_role,provider_language_minority.spoken_language,
			case 
				when provider_language_minority.minority <@ '{true}' then true
				else false
			end as minority,health_system_name,array_to_string(doctor_list,',') doctor_list,do_not_use_text,
			(SELECT ww_custom.donotoperate((select state_id from public.state where state_abbr = addr_state and state_country_id = 230))) as do_not_operate
			from public.crmacct
			join public.crmacctrole on crmacctrole_crmacct_id = crmacct_id and crmacctrole_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = _role)
			join public.addr on (select ww_custom.get_panel_primary_address(crmacct_id)) = addr_id 
			left join ww_custom.ww_zip_code on ww_zip_code_code = addr_postalcode
			left join ww_custom.provider_specialities_view prov_speciality on prov_speciality.provider_specialities_provider_id = crmacct_id			
			left join ww_custom.provider_ppo_view prov_ppo on prov_ppo.provider_ppo_provider_id = crmacct_id		
			LEFT JOIN ww_custom.provider_ext on crmacct_id = provider_ext_provider_id
			left join ww_custom.health_system on health_system_id = provider_ext_health_system_id
			LEFT JOIN ww_custom.provider_language_minority on crmacct_id = phy_crmacct_id	
			LEFT JOIN public.crmacctcntctass on crmacctcntctass_crmacct_id = crmacct_id and crmacctcntctass_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Scheduling')		
			LEFT JOIN 
			(		
				select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
				and cntctphone_phone like '800-%' 
				union 
				select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
				and cntctphone_phone not like '800-%' 
				and cntctphone_cntct_id not in 
				(
					select cntctphone_cntct_id  from public.cntctphone  
					where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Office')
					and cntctphone_phone like '800-%'	 		
				)
			) phone on phone.cntctphone_cntct_id = crmacctcntctass_cntct_id 
			LEFT JOIN
			(
				select crmacctcntctass_crmacct_id,array_agg(cntct.cntct_name) doctor_list
				from public.crmacctcntctass 
				join public.cntct on cntct_id = crmacctcntctass_cntct_id
				where crmacctcntctass_crmrole_id = 23 and crmacctcntctass_active
				and upper(cntct_name) ~ upper(_doctor)
				group by crmacctcntctass_crmacct_id
			) doc on doc.crmacctcntctass_crmacct_id = crmacct_id
			LEFT JOIN
			(
				select special_instruction_crmacct_id,
				case  
					when special_instruction_text != '' then true 
					else false
				end as do_not_use_text
				from ww_custom.special_instruction
				join ww_custom.special_instruction_category on special_instruction_category_category_id = special_instruction_category_id
				where special_instruction_category_id = 92
			) dnu on dnu.special_instruction_crmacct_id = crmacct_id
			LEFT JOIN
			(
			select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
			where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
			and cntctphone_phone like '800-%'
			union
			select cntctphone_cntct_id,cntctphone_phone from  public.cntctphone  
			where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
			and cntctphone_phone not like '800-%'
			and cntctphone_cntct_id not in
				(
				select cntctphone_cntct_id  from public.cntctphone
				where cntctphone_crmrole_id = (select crmrole_id from public.crmrole where crmrole_name = 'Fax')
				and cntctphone_phone like '800-%'
				)
			) fax on fax.cntctphone_cntct_id = crmacctcntctass_cntct_id			
			LEFT JOIN 
			(	
				select case_management_notes_provider_id,
				string_agg(case_management_notes_department || ':' || case_management_notes_text,',') case_management_notes_text
				from ww_custom.case_management_notes
				group by case_management_notes_provider_id
			) fgty on case_management_notes_provider_id = crmacct_id
			where 1 = 1
			and 	( 
					abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long)) < _distance
					OR addr_postalcode like '%' || _search_zip || '%'
				)
			and (upper(array_to_string(Coalesce(doctor_list,'{}'),',')) ~ upper(_doctor))
			and (COALESCE(prov_ppo,'{}') @> _ppo OR COALESCE(prov_ppo,'{}') && _ppo) 
			and (COALESCE(prov_speciality,'{}') @> _speciality OR COALESCE(prov_speciality,'{}') && _speciality)		
			and (COALESCE(provider_language_minority.spoken_language,'{English}') @> _language)
			--and (_minority @> COALESCE(provider_language_minority.minority,'{false}')   )						
			and ( provider_language_minority.minority @> '{false}' )
			and UPPER(crmacct_name) like '%' || UPPER(_practice_name) || '%'
			and UPPER(addr_line1) like '%' || UPPER(_address) || '%'
			and UPPER(addr_city) like '%' || UPPER(_city) || '%'
			and UPPER(addr_state) like '%' || UPPER(_state) || '%'
			and UPPER(ww_zip_code_county) like '%' || UPPER(_county) || '%'		
			and 
			( 
				coalesce(phone.cntctphone_phone,'') like  _phone_ac || '%'
				and replace(coalesce(phone.cntctphone_phone,''),'-','') like  '%' || _phone_number || '%'
			)
			and 
			(
				coalesce(fax.cntctphone_phone,'') like  _fax_ac || '%'
				and replace(coalesce(fax.cntctphone_phone,''),'-','') like  '%' || _fax_number || '%'
			)
			and COALESCE(provider_ext_part,'' ) like  '%' || _prov_part || '%'		
			order by abs(ww_custom.distance(coalesce(addr_lat,ww_zip_code_lat),coalesce(addr_lon,ww_zip_code_lon),_zip_lat,_zip_long))
	Unique  (cost=78953.63..78953.69 rows=1 width=365) (actual rows=2582 loops=1)
	  Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, ($57)::double precision, ($56)::double precision))), cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, provider_ext.provider_ext_part, (string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)), ($46), provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	  Buffers: shared hit=1990983 read=43
	  InitPlan 3 (returns $2)
	    ->  Seq Scan on public.crmrole  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	          Output: crmrole.crmrole_id
	          Filter: (crmrole.crmrole_name = $46)
	          Rows Removed by Filter: 37
	          Buffers: shared hit=1
	  InitPlan 5 (returns $4)
	    ->  Seq Scan on public.crmrole crmrole_1  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	          Output: crmrole_1.crmrole_id
	          Filter: (crmrole_1.crmrole_name = 'Scheduling'::text)
	          Rows Removed by Filter: 37
	          Buffers: shared hit=1
	  ->  Sort  (cost=78950.68..78950.69 rows=1 width=365) (actual rows=2582 loops=1)
	        Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, ($57)::double precision, ($56)::double precision))), cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, provider_ext.provider_ext_part, (string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)), ($46), provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	        Sort Key: (abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, ($57)::double precision, ($56)::double precision))), crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, provider_ext.provider_ext_part, (string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)), provider_language_minority.spoken_language, (CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END), health_system.health_system_name, (array_to_string(doc.doctor_list, ','::text)), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), ((SubPlan 2))
	        Sort Method: quicksort  Memory: 1490kB
	        Buffers: shared hit=1990983 read=43
	        ->  Nested Loop Left Join  (cost=67135.55..78950.67 rows=1 width=365) (actual rows=2582 loops=1)
	              Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, ww_zip_code.ww_zip_code_county, prov_speciality.prov_speciality, prov_ppo.prov_ppo, abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, ($57)::double precision, ($56)::double precision)), cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, provider_ext.provider_ext_part, (string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)), $46, provider_language_minority.spoken_language, CASE WHEN (provider_language_minority.minority <@ '{t}'::boolean[]) THEN true ELSE false END, health_system.health_system_name, array_to_string(doc.doctor_list, ','::text), (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END), (SubPlan 2)
	              Inner Unique: true
	              Join Filter: (case_management_notes.case_management_notes_provider_id = crmacct.crmacct_id)
	              Buffers: shared hit=1990983 read=43
	              ->  Hash Left Join  (cost=67110.15..78911.98 rows=1 width=351) (actual rows=2582 loops=1)
	                    Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, cntctphone.cntctphone_phone, doc.doctor_list, cntctphone_2.cntctphone_phone, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                    Inner Unique: true
	                    Hash Cond: (crmacct.crmacct_id = doc.crmacctcntctass_crmacct_id)
	                    Filter: (upper(array_to_string(COALESCE(doc.doctor_list, '{}'::text[]), ','::text)) ~ upper($68))
	                    Buffers: shared hit=1967745 read=43
	                    ->  Nested Loop  (cost=60253.39..72055.21 rows=1 width=319) (actual rows=2582 loops=1)
	                          Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, provider_language_minority.spoken_language, provider_language_minority.minority, cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                          Join Filter: (crmacctrole.crmacctrole_crmacct_id = provider_language_minority.phy_crmacct_id)
	                          Rows Removed by Join Filter: 50889534
	                          Buffers: shared hit=1266580 read=43
	                          ->  Nested Loop Left Join  (cost=46186.26..52553.60 rows=1 width=259) (actual rows=2662 loops=1)
	                                Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                Join Filter: (special_instruction.special_instruction_crmacct_id = crmacct.crmacct_id)
	                                Rows Removed by Join Filter: 428497
	                                Buffers: shared hit=1231151 read=43
	                                ->  Nested Loop Left Join  (cost=46186.26..52373.87 rows=1 width=258) (actual rows=2662 loops=1)
	                                      Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name, cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone
	                                      Filter: ((COALESCE(cntctphone.cntctphone_phone, ''::text) ~~ ($58 || '%'::text)) AND (COALESCE(cntctphone_2.cntctphone_phone, ''::text) ~~ ($60 || '%'::text)) AND (replace(COALESCE(cntctphone.cntctphone_phone, ''::text), '-'::text, ''::text) ~~ (('%'::text || $59) || '%'::text)) AND (replace(COALESCE(cntctphone_2.cntctphone_phone, ''::text), '-'::text, ''::text) ~~ (('%'::text || $61) || '%'::text)))
	                                      Buffers: shared hit=946317 read=43
	                                      ->  Nested Loop Left Join  (cost=23041.01..28330.48 rows=1 width=194) (actual rows=2656 loops=1)
	                                            Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, health_system.health_system_name
	                                            Inner Unique: true
	                                            Buffers: shared hit=922149 read=43
	                                            ->  Nested Loop Left Join  (cost=23040.87..28330.33 rows=1 width=180) (actual rows=2656 loops=1)
	                                                  Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo, provider_ext.provider_ext_part, provider_ext.provider_ext_health_system_id
	                                                  Filter: (COALESCE(provider_ext.provider_ext_part, ''::text) ~~ (('%'::text || $63) || '%'::text))
	                                                  Buffers: shared hit=922007 read=42
	                                                  ->  Nested Loop  (cost=23040.59..28329.72 rows=1 width=174) (actual rows=2656 loops=1)
	                                                        Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo
	                                                        Inner Unique: true
	                                                        Buffers: shared hit=914064 read=6
	                                                        ->  Nested Loop  (cost=23040.30..28326.92 rows=1 width=154) (actual rows=2677 loops=1)
	                                                              Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_lat, addr.addr_lon, prov_speciality.prov_speciality, prov_ppo.prov_ppo
	                                                              Inner Unique: true
	                                                              Buffers: shared hit=906055
	                                                              ->  Nested Loop  (cost=23039.62..28323.01 rows=1 width=101) (actual rows=12741 loops=1)
	                                                                    Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacctrole.crmacctrole_crmacct_id, prov_speciality.prov_speciality, prov_ppo.prov_ppo
	                                                                    Buffers: shared hit=778553
	                                                                    ->  Hash Left Join  (cost=23039.20..28321.23 rows=1 width=97) (actual rows=165444 loops=1)
	                                                                          Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, prov_speciality.prov_speciality, prov_ppo.prov_ppo
	                                                                          Inner Unique: true
	                                                                          Hash Cond: (crmacct.crmacct_id = prov_ppo.provider_ppo_provider_id)
	                                                                          Filter: ((COALESCE(prov_ppo.prov_ppo, '{}'::text[]) @> $47) OR (COALESCE(prov_ppo.prov_ppo, '{}'::text[]) && $47))
	                                                                          Buffers: shared hit=115503
	                                                                          ->  Hash Left Join  (cost=11198.19..16480.19 rows=12 width=65) (actual rows=165444 loops=1)
	                                                                                Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, prov_speciality.prov_speciality
	                                                                                Inner Unique: true
	                                                                                Hash Cond: (crmacct.crmacct_id = prov_speciality.provider_specialities_provider_id)
	                                                                                Filter: ((COALESCE(prov_speciality.prov_speciality, '{}'::text[]) @> $48) OR (COALESCE(prov_speciality.prov_speciality, '{}'::text[]) && $48))
	                                                                                Buffers: shared hit=76858
	                                                                                ->  Seq Scan on public.crmacct  (cost=0.00..5279.83 rows=827 width=33) (actual rows=165444 loops=1)
	                                                                                      Output: crmacct.crmacct_id, crmacct.crmacct_number, crmacct.crmacct_name, crmacct.crmacct_active, crmacct.crmacct_type, crmacct.crmacct_parent_id, crmacct.crmacct_notes, crmacct.crmacct_owner_username, crmacct.crmacct_usr_username, crmacct.crmacct_created, crmacct.crmacct_lastupdated
	                                                                                      Filter: (upper(crmacct.crmacct_name) ~~ (('%'::text || upper($49)) || '%'::text))
	                                                                                      Rows Removed by Filter: 15
	                                                                                      Buffers: shared hit=1557
	                                                                                ->  Hash  (cost=11195.69..11195.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                      Output: prov_speciality.prov_speciality, prov_speciality.provider_specialities_provider_id
	                                                                                      Buckets: 32768 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 1629kB
	                                                                                      Buffers: shared hit=75301
	                                                                                      ->  Subquery Scan on prov_speciality  (cost=11075.87..11195.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                            Output: prov_speciality.prov_speciality, prov_speciality.provider_specialities_provider_id
	                                                                                            Buffers: shared hit=75301
	                                                                                            ->  GroupAggregate  (cost=11075.87..11193.69 rows=200 width=36) (actual rows=19104 loops=1)
	                                                                                                  Output: provider_specialities.provider_specialities_provider_id, array_agg(DISTINCT provider_specialities.provider_specialities_code)
	                                                                                                  Group Key: provider_specialities.provider_specialities_provider_id
	                                                                                                  Buffers: shared hit=75301
	                                                                                                  ->  Merge Append  (cost=11075.87..11168.76 rows=4487 width=7) (actual rows=31775 loops=1)
	                                                                                                        Sort Key: provider_specialities.provider_specialities_provider_id
	                                                                                                        Buffers: shared hit=75301
	                                                                                                        ->  Sort  (cost=2567.87..2571.08 rows=1286 width=7) (actual rows=14290 loops=1)
	                                                                                                              Output: provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code
	                                                                                                              Sort Key: provider_specialities.provider_specialities_provider_id
	                                                                                                              Sort Method: quicksort  Memory: 1054kB
	                                                                                                              Buffers: shared hit=72696
	                                                                                                              ->  Merge Join  (cost=5.96..2488.60 rows=1286 width=7) (actual rows=14290 loops=1)
	                                                                                                                    Output: provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code
	                                                                                                                    Merge Cond: (provider_specialities.provider_specialities_provider_id = crmacctrole_1.crmacctrole_crmacct_id)
	                                                                                                                    Buffers: shared hit=72696
	                                                                                                                    ->  Index Scan using provider_specialities_provider_id_idx on ww_custom.provider_specialities  (cost=0.29..758.40 rows=31286 width=7) (actual rows=31286 loops=1)
	                                                                                                                          Output: provider_specialities.provider_specialities_id, provider_specialities.provider_specialities_provider_id, provider_specialities.provider_specialities_code, provider_specialities.provider_specialities_active, provider_specialities.provider_specialities_expires, provider_specialities.provider_specialities_date_inserted, provider_specialities.provider_specialities_date_updated
	                                                                                                                          Buffers: shared hit=3107
	                                                                                                                    ->  Index Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_1  (cost=0.42..4383.53 rows=6699 width=4) (actual rows=14301 loops=1)
	                                                                                                                          Output: crmacctrole_1.crmacctrole_id, crmacctrole_1.crmacctrole_crmacct_id, crmacctrole_1.crmacctrole_crmrole_id
	                                                                                                                          Filter: (crmacctrole_1.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                                                                          Rows Removed by Filter: 526223
	                                                                                                                          Buffers: shared hit=69589
	                                                                                                        ->  Unique  (cost=8507.99..8532.00 rows=3201 width=7) (actual rows=17485 loops=1)
	                                                                                                              Output: crmacctrole_2.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                              Buffers: shared hit=2605
	                                                                                                              ->  Sort  (cost=8507.99..8515.99 rows=3201 width=7) (actual rows=42592 loops=1)
	                                                                                                                    Output: crmacctrole_2.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                    Sort Key: crmacctrole_2.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                    Sort Method: quicksort  Memory: 3533kB
	                                                                                                                    Buffers: shared hit=2605
	                                                                                                                    ->  Hash Left Join  (cost=3621.29..8321.62 rows=3201 width=7) (actual rows=42592 loops=1)
	                                                                                                                          Output: crmacctrole_2.crmacctrole_crmacct_id, speciality.speciality_code
	                                                                                                                          Inner Unique: true
	                                                                                                                          Hash Cond: (doctor_specialities.doctor_specialities_specialities_code = speciality.speciality_id)
	                                                                                                                          Buffers: shared hit=2605
	                                                                                                                          ->  Hash Left Join  (cost=3618.61..8310.11 rows=3201 width=8) (actual rows=42592 loops=1)
	                                                                                                                                Output: crmacctrole_2.crmacctrole_crmacct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                Hash Cond: (crmacctcntctass_1.crmacctcntctass_cntct_id = doctor_specialities.doctor_specialities_cntct_id)
	                                                                                                                                Buffers: shared hit=2604
	                                                                                                                                ->  Hash Join  (cost=3125.88..7795.77 rows=3201 width=8) (actual rows=41725 loops=1)
	                                                                                                                                      Output: crmacctrole_2.crmacctrole_crmacct_id, crmacctcntctass_1.crmacctcntctass_cntct_id
	                                                                                                                                      Hash Cond: (crmacctcntctass_1.crmacctcntctass_crmacct_id = crmacctrole_2.crmacctrole_crmacct_id)
	                                                                                                                                      Buffers: shared hit=2481
	                                                                                                                                      ->  Seq Scan on public.crmacctcntctass crmacctcntctass_1  (cost=0.00..3958.88 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                                                                            Output: crmacctcntctass_1.crmacctcntctass_id, crmacctcntctass_1.crmacctcntctass_crmacct_id, crmacctcntctass_1.crmacctcntctass_cntct_id, crmacctcntctass_1.crmacctcntctass_crmrole_id, crmacctcntctass_1.crmacctcntctass_active, crmacctcntctass_1.crmacctcntctass_default, crmacctcntctass_1.crmacctcntctass_createdby, crmacctcntctass_1.crmacctcntctass_created, crmacctcntctass_1.crmacctcntctass_lastupdated
	                                                                                                                                            Filter: (crmacctcntctass_1.crmacctcntctass_crmrole_id = 23)
	                                                                                                                                            Rows Removed by Filter: 148265
	                                                                                                                                            Buffers: shared hit=1584
	                                                                                                                                      ->  Hash  (cost=2969.86..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                            Output: crmacctrole_2.crmacctrole_crmacct_id
	                                                                                                                                            Buckets: 16384  Batches: 1  Memory Usage: 576kB
	                                                                                                                                            Buffers: shared hit=897
	                                                                                                                                            ->  Seq Scan on public.crmacctrole crmacctrole_2  (cost=0.00..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                                  Output: crmacctrole_2.crmacctrole_crmacct_id
	                                                                                                                                                  Filter: (crmacctrole_2.crmacctrole_crmrole_id = 22)
	                                                                                                                                                  Rows Removed by Filter: 153088
	                                                                                                                                                  Buffers: shared hit=897
	                                                                                                                                ->  Hash  (cost=412.37..412.37 rows=6430 width=8) (actual rows=19291 loops=1)
	                                                                                                                                      Output: doctor_specialities.doctor_specialities_cntct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                      Buckets: 32768 (originally 8192)  Batches: 1 (originally 1)  Memory Usage: 1010kB
	                                                                                                                                      Buffers: shared hit=123
	                                                                                                                                      ->  Seq Scan on ww_custom.doctor_specialities  (cost=0.00..412.37 rows=6430 width=8) (actual rows=19291 loops=1)
	                                                                                                                                            Output: doctor_specialities.doctor_specialities_cntct_id, doctor_specialities.doctor_specialities_specialities_code
	                                                                                                                                            Filter: (doctor_specialities.doctor_specialities_active AND (COALESCE(doctor_specialities.doctor_specialities_expires, '2100-12-31'::date) > CURRENT_DATE))
	                                                                                                                                            Buffers: shared hit=123
	                                                                                                                          ->  Hash  (cost=2.03..2.03 rows=52 width=7) (actual rows=52 loops=1)
	                                                                                                                                Output: speciality.speciality_code, speciality.speciality_id
	                                                                                                                                Buckets: 1024  Batches: 1  Memory Usage: 11kB
	                                                                                                                                Buffers: shared hit=1
	                                                                                                                                ->  Seq Scan on ww_custom.speciality  (cost=0.00..2.03 rows=52 width=7) (actual rows=52 loops=1)
	                                                                                                                                      Output: speciality.speciality_code, speciality.speciality_id
	                                                                                                                                      Filter: (speciality.speciality_role = 'Physician Practice'::text)
	                                                                                                                                      Rows Removed by Filter: 30
	                                                                                                                                      Buffers: shared hit=1
	                                                                          ->  Hash  (cost=11838.51..11838.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                Output: prov_ppo.prov_ppo, prov_ppo.provider_ppo_provider_id
	                                                                                Buckets: 32768 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 1868kB
	                                                                                Buffers: shared hit=38645
	                                                                                ->  Subquery Scan on prov_ppo  (cost=11720.70..11838.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                      Output: prov_ppo.prov_ppo, prov_ppo.provider_ppo_provider_id
	                                                                                      Buffers: shared hit=38645
	                                                                                      ->  GroupAggregate  (cost=11720.70..11836.51 rows=200 width=36) (actual rows=17669 loops=1)
	                                                                                            Output: provider_ppo.provider_ppo_provider_id, array_agg(DISTINCT ppo.ppo_name)
	                                                                                            Group Key: provider_ppo.provider_ppo_provider_id
	                                                                                            Buffers: shared hit=38645
	                                                                                            ->  Merge Append  (cost=11720.70..11812.24 rows=4353 width=13) (actual rows=45517 loops=1)
	                                                                                                  Sort Key: provider_ppo.provider_ppo_provider_id
	                                                                                                  Buffers: shared hit=38645
	                                                                                                  ->  Sort  (cost=2493.41..2496.29 rows=1152 width=13) (actual rows=5369 loops=1)
	                                                                                                        Output: provider_ppo.provider_ppo_provider_id, ppo.ppo_name
	                                                                                                        Sort Key: provider_ppo.provider_ppo_provider_id
	                                                                                                        Sort Method: quicksort  Memory: 445kB
	                                                                                                        Buffers: shared hit=35870
	                                                                                                        ->  Hash Join  (cost=7.25..2423.31 rows=1152 width=13) (actual rows=5369 loops=1)
	                                                                                                              Output: provider_ppo.provider_ppo_provider_id, ppo.ppo_name
	                                                                                                              Inner Unique: true
	                                                                                                              Hash Cond: (provider_ppo.provider_ppo_code = ppo.ppo_id)
	                                                                                                              Buffers: shared hit=35870
	                                                                                                              ->  Merge Join  (cost=5.96..2418.01 rows=1152 width=8) (actual rows=5369 loops=1)
	                                                                                                                    Output: provider_ppo.provider_ppo_provider_id, provider_ppo.provider_ppo_code
	                                                                                                                    Merge Cond: (provider_ppo.provider_ppo_provider_id = crmacctrole_3.crmacctrole_crmacct_id)
	                                                                                                                    Buffers: shared hit=35869
	                                                                                                                    ->  Index Scan using provider_ppo_provider_id_idx on ww_custom.provider_ppo  (cost=0.29..697.29 rows=28032 width=8) (actual rows=28032 loops=1)
	                                                                                                                          Output: provider_ppo.provider_ppo_id, provider_ppo.provider_ppo_provider_id, provider_ppo.provider_ppo_code, provider_ppo.provider_ppo_active, provider_ppo.provider_ppo_expires, provider_ppo.provider_ppo_date_inserted, provider_ppo.provider_ppo_date_updated
	                                                                                                                          Buffers: shared hit=2719
	                                                                                                                    ->  Index Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_3  (cost=0.42..4383.53 rows=6699 width=4) (actual rows=6818 loops=1)
	                                                                                                                          Output: crmacctrole_3.crmacctrole_id, crmacctrole_3.crmacctrole_crmacct_id, crmacctrole_3.crmacctrole_crmrole_id
	                                                                                                                          Filter: (crmacctrole_3.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                                                                          Rows Removed by Filter: 56141
	                                                                                                                          Buffers: shared hit=33150
	                                                                                                              ->  Hash  (cost=1.13..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                    Output: ppo.ppo_name, ppo.ppo_id
	                                                                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                                                    Buffers: shared hit=1
	                                                                                                                    ->  Seq Scan on ww_custom.ppo  (cost=0.00..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                          Output: ppo.ppo_name, ppo.ppo_id
	                                                                                                                          Buffers: shared hit=1
	                                                                                                  ->  Unique  (cost=9227.27..9251.28 rows=3201 width=13) (actual rows=40148 loops=1)
	                                                                                                        Output: crmacctrole_4.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                        Buffers: shared hit=2775
	                                                                                                        ->  Sort  (cost=9227.27..9235.28 rows=3201 width=13) (actual rows=99922 loops=1)
	                                                                                                              Output: crmacctrole_4.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                              Sort Key: crmacctrole_4.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                              Sort Method: quicksort  Memory: 8251kB
	                                                                                                              Buffers: shared hit=2775
	                                                                                                              ->  Hash Left Join  (cost=4300.05..9040.91 rows=3201 width=13) (actual rows=99922 loops=1)
	                                                                                                                    Output: crmacctrole_4.crmacctrole_crmacct_id, ppo_1.ppo_name
	                                                                                                                    Inner Unique: true
	                                                                                                                    Hash Cond: (doctor_ppo.doctor_ppo_code = ppo_1.ppo_id)
	                                                                                                                    Buffers: shared hit=2775
	                                                                                                                    ->  Hash Left Join  (cost=4298.75..9028.47 rows=3201 width=8) (actual rows=99922 loops=1)
	                                                                                                                          Output: crmacctrole_4.crmacctrole_crmacct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                          Hash Cond: (crmacctcntctass_2.crmacctcntctass_cntct_id = doctor_ppo.doctor_ppo_cntct_id)
	                                                                                                                          Buffers: shared hit=2774
	                                                                                                                          ->  Hash Join  (cost=3125.88..7795.77 rows=3201 width=8) (actual rows=41725 loops=1)
	                                                                                                                                Output: crmacctrole_4.crmacctrole_crmacct_id, crmacctcntctass_2.crmacctcntctass_cntct_id
	                                                                                                                                Hash Cond: (crmacctcntctass_2.crmacctcntctass_crmacct_id = crmacctrole_4.crmacctrole_crmacct_id)
	                                                                                                                                Buffers: shared hit=2481
	                                                                                                                                ->  Seq Scan on public.crmacctcntctass crmacctcntctass_2  (cost=0.00..3958.88 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                                                                      Output: crmacctcntctass_2.crmacctcntctass_id, crmacctcntctass_2.crmacctcntctass_crmacct_id, crmacctcntctass_2.crmacctcntctass_cntct_id, crmacctcntctass_2.crmacctcntctass_crmrole_id, crmacctcntctass_2.crmacctcntctass_active, crmacctcntctass_2.crmacctcntctass_default, crmacctcntctass_2.crmacctcntctass_createdby, crmacctcntctass_2.crmacctcntctass_created, crmacctcntctass_2.crmacctcntctass_lastupdated
	                                                                                                                                      Filter: (crmacctcntctass_2.crmacctcntctass_crmrole_id = 23)
	                                                                                                                                      Rows Removed by Filter: 148265
	                                                                                                                                      Buffers: shared hit=1584
	                                                                                                                                ->  Hash  (cost=2969.86..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                      Output: crmacctrole_4.crmacctrole_crmacct_id
	                                                                                                                                      Buckets: 16384  Batches: 1  Memory Usage: 576kB
	                                                                                                                                      Buffers: shared hit=897
	                                                                                                                                      ->  Seq Scan on public.crmacctrole crmacctrole_4  (cost=0.00..2969.86 rows=12481 width=4) (actual rows=12741 loops=1)
	                                                                                                                                            Output: crmacctrole_4.crmacctrole_crmacct_id
	                                                                                                                                            Filter: (crmacctrole_4.crmacctrole_crmrole_id = 22)
	                                                                                                                                            Rows Removed by Filter: 153088
	                                                                                                                                            Buffers: shared hit=897
	                                                                                                                          ->  Hash  (cost=981.61..981.61 rows=15302 width=8) (actual rows=45907 loops=1)
	                                                                                                                                Output: doctor_ppo.doctor_ppo_cntct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                                Buckets: 65536 (originally 16384)  Batches: 1 (originally 1)  Memory Usage: 2306kB
	                                                                                                                                Buffers: shared hit=293
	                                                                                                                                ->  Seq Scan on ww_custom.doctor_ppo  (cost=0.00..981.61 rows=15302 width=8) (actual rows=45907 loops=1)
	                                                                                                                                      Output: doctor_ppo.doctor_ppo_cntct_id, doctor_ppo.doctor_ppo_code
	                                                                                                                                      Filter: (doctor_ppo.doctor_ppo_active AND (COALESCE(doctor_ppo.doctor_ppo_expires, '2100-12-31'::date) > CURRENT_DATE))
	                                                                                                                                      Buffers: shared hit=293
	                                                                                                                    ->  Hash  (cost=1.13..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                          Output: ppo_1.ppo_name, ppo_1.ppo_id
	                                                                                                                          Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                                                                          Buffers: shared hit=1
	                                                                                                                          ->  Seq Scan on ww_custom.ppo ppo_1  (cost=0.00..1.13 rows=13 width=13) (actual rows=13 loops=1)
	                                                                                                                                Output: ppo_1.ppo_name, ppo_1.ppo_id
	                                                                                                                                Buffers: shared hit=1
	                                                                    ->  Index Scan using crmacctrole_crmacct_id_idx on public.crmacctrole  (cost=0.42..1.77 rows=1 width=4) (actual rows=0 loops=165444)
	                                                                          Output: crmacctrole.crmacctrole_id, crmacctrole.crmacctrole_crmacct_id, crmacctrole.crmacctrole_crmrole_id
	                                                                          Index Cond: (crmacctrole.crmacctrole_crmacct_id = crmacct.crmacct_id)
	                                                                          Filter: (crmacctrole.crmacctrole_crmrole_id = $2)
	                                                                          Rows Removed by Filter: 1
	                                                                          Buffers: shared hit=663050
	                                                              ->  Index Scan using addr_pkey on public.addr  (cost=0.68..2.30 rows=1 width=57) (actual rows=0 loops=12741)
	                                                                    Output: addr.addr_id, addr.addr_active, addr.addr_line1, addr.addr_line2, addr.addr_line3, addr.addr_city, addr.addr_state, addr.addr_postalcode, addr.addr_country, addr.addr_notes, addr.addr_number, addr.addr_lat, addr.addr_lon, addr.addr_accuracy, addr.addr_allowmktg, addr.addr_createdby, addr.addr_created, addr.addr_lastupdated
	                                                                    Index Cond: (addr.addr_id = (SubPlan 4))
	                                                                    Filter: ((upper(addr.addr_line1) ~~ (('%'::text || upper($50)) || '%'::text)) AND (upper(addr.addr_city) ~~ (('%'::text || upper($51)) || '%'::text)) AND (upper(addr.addr_state) ~~ (('%'::text || upper($52)) || '%'::text)))
	                                                                    Rows Removed by Filter: 1
	                                                                    Buffers: shared hit=51023
	                                                                    SubPlan 4
	                                                                      ->  Result  (cost=0.00..0.26 rows=1 width=4) (actual rows=1 loops=12741)
	                                                                            Output: ww_custom.get_panel_primary_address(crmacct.crmacct_id)
	                                                                            Buffers: shared hit=76479
	                                                        ->  Index Scan using ww_zip_code_ww_zip_code_code_idx on ww_custom.ww_zip_code  (cost=0.29..2.80 rows=1 width=26) (actual rows=1 loops=2677)
	                                                              Output: ww_zip_code.ww_zip_code_id, ww_zip_code.ww_zip_code_code, ww_zip_code.ww_zip_code_city, ww_zip_code.ww_zip_code_county, ww_zip_code.ww_zip_code_state_name, ww_zip_code.ww_zip_code_state_prefix, ww_zip_code.ww_zip_code_area_code, ww_zip_code.ww_zip_code_time_zone, ww_zip_code.ww_zip_code_lat, ww_zip_code.ww_zip_code_lon
	                                                              Index Cond: (ww_zip_code.ww_zip_code_code = addr.addr_postalcode)
	                                                              Filter: ((upper(ww_zip_code.ww_zip_code_county) ~~ (('%'::text || upper($54)) || '%'::text)) AND ((abs(ww_custom.distance((COALESCE(addr.addr_lat, ww_zip_code.ww_zip_code_lat))::double precision, (COALESCE(addr.addr_lon, ww_zip_code.ww_zip_code_lon))::double precision, ($57)::double precision, ($56)::double precision)) < ($55)::double precision) OR (addr.addr_postalcode ~~ (('%'::text || $62) || '%'::text))))
	                                                              Buffers: shared hit=8009 read=6
	                                                  ->  Index Scan using provider_ext_prov_id_idx on ww_custom.provider_ext  (cost=0.29..0.59 rows=1 width=10) (actual rows=1 loops=2656)
	                                                        Output: provider_ext.provider_ext_id, provider_ext.provider_ext_provider_id, provider_ext.provider_ext_part, provider_ext.provider_ext_npi, provider_ext.provider_ext_active, provider_ext.provider_ext_expires, provider_ext.provider_ext_network_status, provider_ext.provider_ext_agreement_date, provider_ext.provider_ext_agreement_type, provider_ext.provider_ext_agreement_id, provider_ext.provider_ext_mmi_expires, provider_ext.provider_ext_mmi_received, provider_ext.provider_ext_compliance_score, provider_ext.provider_ext_claims_score, provider_ext.provider_ext_tier, provider_ext.provider_ext_part_a_provider_number, provider_ext.provider_ext_health_system_id, provider_ext.provider_ext_date_inserted, provider_ext.provider_ext_date_updated, provider_ext.provider_ext_walk_in, provider_ext.provider_ext_tax_id
	                                                        Index Cond: (crmacct.crmacct_id = provider_ext.provider_ext_provider_id)
	                                                        Buffers: shared hit=7943 read=36
	                                            ->  Index Scan using health_system_pk on ww_custom.health_system  (cost=0.14..0.16 rows=1 width=20) (actual rows=0 loops=2656)
	                                                  Output: health_system.health_system_id, health_system.health_system_name, health_system.health_system_dba, health_system.health_system_state, health_system.health_system_expires, health_system.health_system_active
	                                                  Index Cond: (health_system.health_system_id = provider_ext.provider_ext_health_system_id)
	                                                  Buffers: shared hit=142 read=1
	                                      ->  Nested Loop Left Join  (cost=23145.25..24043.35 rows=1 width=68) (actual rows=1 loops=2656)
	                                            Output: crmacctcntctass.crmacctcntctass_crmacct_id, cntctphone.cntctphone_phone, cntctphone_2.cntctphone_phone
	                                            Join Filter: (cntctphone_2.cntctphone_cntct_id = crmacctcntctass.crmacctcntctass_cntct_id)
	                                            Rows Removed by Join Filter: 18121
	                                            Buffers: shared hit=24168
	                                            ->  Hash Right Join  (cost=11573.65..11952.85 rows=1 width=40) (actual rows=1 loops=2656)
	                                                  Output: crmacctcntctass.crmacctcntctass_crmacct_id, crmacctcntctass.crmacctcntctass_cntct_id, cntctphone.cntctphone_phone
	                                                  Hash Cond: (cntctphone.cntctphone_cntct_id = crmacctcntctass.crmacctcntctass_cntct_id)
	                                                  Buffers: shared hit=18074
	                                                  ->  HashAggregate  (cost=11571.61..11731.27 rows=15966 width=36) (actual rows=28725 loops=2656)
	                                                        Output: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                        Group Key: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                        Buffers: shared hit=7403
	                                                        ->  Append  (cost=1.48..11491.78 rows=15966 width=36) (actual rows=28725 loops=1)
	                                                              Buffers: shared hit=7403
	                                                              ->  Seq Scan on public.cntctphone  (cost=1.48..3688.25 rows=335 width=16) (actual rows=529 loops=1)
	                                                                    Output: cntctphone.cntctphone_cntct_id, cntctphone.cntctphone_phone
	                                                                    Filter: ((cntctphone.cntctphone_phone ~~ '800-%'::text) AND (cntctphone.cntctphone_crmrole_id = $8))
	                                                                    Rows Removed by Filter: 157456
	                                                                    Buffers: shared hit=1318
	                                                                    InitPlan 9 (returns $8)
	                                                                      ->  Seq Scan on public.crmrole crmrole_4  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                            Output: crmrole_4.crmrole_id
	                                                                            Filter: (crmrole_4.crmrole_name = 'Office'::text)
	                                                                            Rows Removed by Filter: 37
	                                                                            Buffers: shared hit=1
	                                                              ->  Index Only Scan using cntctphone_unq on public.cntctphone cntctphone_1  (cost=3690.98..7643.87 rows=15631 width=16) (actual rows=28196 loops=1)
	                                                                    Output: cntctphone_1.cntctphone_cntct_id, cntctphone_1.cntctphone_phone
	                                                                    Index Cond: (cntctphone_1.cntctphone_crmrole_id = $5)
	                                                                    Filter: ((cntctphone_1.cntctphone_phone !~~ '800-%'::text) AND (NOT (hashed SubPlan 8)))
	                                                                    Rows Removed by Filter: 551
	                                                                    Heap Fetches: 28747
	                                                                    Buffers: shared hit=6085
	                                                                    InitPlan 6 (returns $5)
	                                                                      ->  Seq Scan on public.crmrole crmrole_2  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                            Output: crmrole_2.crmrole_id
	                                                                            Filter: (crmrole_2.crmrole_name = 'Office'::text)
	                                                                            Rows Removed by Filter: 37
	                                                                            Buffers: shared hit=1
	                                                                    SubPlan 8
	                                                                      ->  Seq Scan on public.cntctphone cntctphone_4  (cost=1.48..3688.25 rows=335 width=4) (actual rows=529 loops=1)
	                                                                            Output: cntctphone_4.cntctphone_cntct_id
	                                                                            Filter: ((cntctphone_4.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_4.cntctphone_crmrole_id = $6))
	                                                                            Rows Removed by Filter: 157456
	                                                                            Buffers: shared hit=1318
	                                                                            InitPlan 7 (returns $6)
	                                                                              ->  Seq Scan on public.crmrole crmrole_3  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                                    Output: crmrole_3.crmrole_id
	                                                                                    Filter: (crmrole_3.crmrole_name = 'Office'::text)
	                                                                                    Rows Removed by Filter: 37
	                                                                                    Buffers: shared hit=1
	                                                  ->  Hash  (cost=2.03..2.03 rows=1 width=8) (actual rows=1 loops=2656)
	                                                        Output: crmacctcntctass.crmacctcntctass_crmacct_id, crmacctcntctass.crmacctcntctass_cntct_id
	                                                        Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                        Buffers: shared hit=10671
	                                                        ->  Index Only Scan using crmacctcntctass_unq on public.crmacctcntctass  (cost=0.42..2.03 rows=1 width=8) (actual rows=1 loops=2656)
	                                                              Output: crmacctcntctass.crmacctcntctass_crmacct_id, crmacctcntctass.crmacctcntctass_cntct_id
	                                                              Index Cond: ((crmacctcntctass.crmacctcntctass_crmacct_id = crmacct.crmacct_id) AND (crmacctcntctass.crmacctcntctass_crmrole_id = $4))
	                                                              Heap Fetches: 2656
	                                                              Buffers: shared hit=10670
	                                            ->  HashAggregate  (cost=11571.61..11731.27 rows=15966 width=36) (actual rows=18101 loops=2659)
	                                                  Output: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                                  Group Key: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                                  Buffers: shared hit=6094
	                                                  ->  Append  (cost=1.48..11491.78 rows=15966 width=36) (actual rows=18101 loops=1)
	                                                        Buffers: shared hit=6094
	                                                        ->  Seq Scan on public.cntctphone cntctphone_2  (cost=1.48..3688.25 rows=335 width=16) (actual rows=16 loops=1)
	                                                              Output: cntctphone_2.cntctphone_cntct_id, cntctphone_2.cntctphone_phone
	                                                              Filter: ((cntctphone_2.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_2.cntctphone_crmrole_id = $12))
	                                                              Rows Removed by Filter: 157969
	                                                              Buffers: shared hit=1318
	                                                              InitPlan 13 (returns $12)
	                                                                ->  Seq Scan on public.crmrole crmrole_7  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                      Output: crmrole_7.crmrole_id
	                                                                      Filter: (crmrole_7.crmrole_name = 'Fax'::text)
	                                                                      Rows Removed by Filter: 37
	                                                                      Buffers: shared hit=1
	                                                        ->  Index Only Scan using cntctphone_unq on public.cntctphone cntctphone_3  (cost=3690.98..7643.87 rows=15631 width=16) (actual rows=18085 loops=1)
	                                                              Output: cntctphone_3.cntctphone_cntct_id, cntctphone_3.cntctphone_phone
	                                                              Index Cond: (cntctphone_3.cntctphone_crmrole_id = $9)
	                                                              Filter: ((cntctphone_3.cntctphone_phone !~~ '800-%'::text) AND (NOT (hashed SubPlan 12)))
	                                                              Rows Removed by Filter: 17
	                                                              Heap Fetches: 18102
	                                                              Buffers: shared hit=4776
	                                                              InitPlan 10 (returns $9)
	                                                                ->  Seq Scan on public.crmrole crmrole_5  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                      Output: crmrole_5.crmrole_id
	                                                                      Filter: (crmrole_5.crmrole_name = 'Fax'::text)
	                                                                      Rows Removed by Filter: 37
	                                                                      Buffers: shared hit=1
	                                                              SubPlan 12
	                                                                ->  Seq Scan on public.cntctphone cntctphone_5  (cost=1.48..3688.25 rows=335 width=4) (actual rows=16 loops=1)
	                                                                      Output: cntctphone_5.cntctphone_cntct_id
	                                                                      Filter: ((cntctphone_5.cntctphone_phone ~~ '800-%'::text) AND (cntctphone_5.cntctphone_crmrole_id = $10))
	                                                                      Rows Removed by Filter: 157969
	                                                                      Buffers: shared hit=1318
	                                                                      InitPlan 11 (returns $10)
	                                                                        ->  Seq Scan on public.crmrole crmrole_6  (cost=0.00..1.48 rows=1 width=4) (actual rows=1 loops=1)
	                                                                              Output: crmrole_6.crmrole_id
	                                                                              Filter: (crmrole_6.crmrole_name = 'Fax'::text)
	                                                                              Rows Removed by Filter: 37
	                                                                              Buffers: shared hit=1
	                                ->  Nested Loop  (cost=0.00..177.71 rows=161 width=5) (actual rows=161 loops=2662)
	                                      Output: special_instruction.special_instruction_crmacct_id, (CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END)
	                                      Buffers: shared hit=284834
	                                      ->  Seq Scan on ww_custom.special_instruction_category  (cost=0.00..1.61 rows=1 width=4) (actual rows=1 loops=2662)
	                                            Output: special_instruction_category.special_instruction_category_id, special_instruction_category.special_instruction_category_group_id, special_instruction_category.special_instruction_category_desc, special_instruction_category.special_instruction_category_active, special_instruction_category.special_instruction_category_expires, special_instruction_category.special_instruction_category_has_values, special_instruction_category.special_instruction_category_ord, special_instruction_category.special_instruction_category_date_updated, special_instruction_category.special_instruction_category_updated_by
	                                            Filter: (special_instruction_category.special_instruction_category_id = 92)
	                                            Rows Removed by Filter: 48
	                                            Buffers: shared hit=2662
	                                      ->  Seq Scan on ww_custom.special_instruction  (cost=0.00..174.49 rows=161 width=9) (actual rows=161 loops=2662)
	                                            Output: special_instruction.special_instruction_category_category_id, special_instruction.special_instruction_crmacct_id, CASE WHEN (special_instruction.special_instruction_text <> ''::text) THEN true ELSE false END
	                                            Filter: (special_instruction.special_instruction_category_category_id = 92)
	                                            Rows Removed by Filter: 5286
	                                            Buffers: shared hit=282172
	                          ->  Subquery Scan on provider_language_minority  (cost=14067.13..19501.19 rows=34 width=68) (actual rows=19118 loops=2662)
	                                Output: provider_language_minority.phy_crmacct_id, provider_language_minority.spoken_language, provider_language_minority.minority
	                                Filter: (COALESCE(provider_language_minority.spoken_language, '{English}'::text[]) @> $64)
	                                Buffers: shared hit=35429
	                                ->  Append  (cost=14067.13..19414.95 rows=6899 width=68) (actual rows=19118 loops=2662)
	                                      Buffers: shared hit=35429
	                                      ->  GroupAggregate  (cost=14067.13..15346.35 rows=200 width=68) (actual rows=12381 loops=2662)
	                                            Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, array_agg(DISTINCT ((COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)))::text), array_agg(DISTINCT (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false)))
	                                            Group Key: crmacctcntctass_3.crmacctcntctass_crmacct_id
	                                            Filter: (array_agg(DISTINCT (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))) @> '{f}'::boolean[])
	                                            Buffers: shared hit=34487
	                                            ->  Unique  (cost=14067.13..14492.37 rows=42524 width=37) (actual rows=12381 loops=2662)
	                                                  Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                  Buffers: shared hit=34487
	                                                  ->  Sort  (cost=14067.13..14173.44 rows=42524 width=37) (actual rows=41725 loops=2662)
	                                                        Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                        Sort Key: crmacctcntctass_3.crmacctcntctass_crmacct_id, (COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying)), (COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false))
	                                                        Sort Method: quicksort  Memory: 3492kB
	                                                        Buffers: shared hit=34487
	                                                        ->  Hash Left Join  (cost=1460.70..10797.88 rows=42524 width=37) (actual rows=41725 loops=1)
	                                                              Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, COALESCE(spoken_languages.spoken_languages_language, 'English'::character varying), COALESCE(cntct_dr_ext.cntct_dr_ext_minority, false)
	                                                              Inner Unique: true
	                                                              Hash Cond: (doctor_spoken_language.doctor_spoken_language_language_id = spoken_languages.spoken_languages_id)
	                                                              Buffers: shared hit=34487
	                                                              ->  Hash Left Join  (cost=1459.55..10617.52 rows=42524 width=9) (actual rows=41725 loops=1)
	                                                                    Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, cntct_dr_ext.cntct_dr_ext_minority, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                    Hash Cond: (crmacctcntctass_3.crmacctcntctass_cntct_id = cntct_dr_ext.cntct_dr_ext_cntct_id)
	                                                                    Buffers: shared hit=34486
	                                                                    ->  Merge Join  (cost=4.39..8934.40 rows=42524 width=8) (actual rows=41725 loops=1)
	                                                                          Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, crmacctcntctass_3.crmacctcntctass_cntct_id
	                                                                          Merge Cond: (crmacctcntctass_3.crmacctcntctass_crmacct_id = crmacctrole_5.crmacctrole_crmacct_id)
	                                                                          Buffers: shared hit=34197
	                                                                          ->  Index Only Scan using crmacctcntctass_unq on public.crmacctcntctass crmacctcntctass_3  (cost=0.42..4021.32 rows=41785 width=8) (actual rows=41725 loops=1)
	                                                                                Output: crmacctcntctass_3.crmacctcntctass_crmacct_id, crmacctcntctass_3.crmacctcntctass_cntct_id, crmacctcntctass_3.crmacctcntctass_crmrole_id
	                                                                                Index Cond: (crmacctcntctass_3.crmacctcntctass_crmrole_id = 23)
	                                                                                Heap Fetches: 41725
	                                                                                Buffers: shared hit=1079
	                                                                          ->  Index Only Scan using crmacctrole_crmacct_id_idx on public.crmacctrole crmacctrole_5  (cost=0.42..3968.96 rows=165829 width=4) (actual rows=92100 loops=1)
	                                                                                Output: crmacctrole_5.crmacctrole_crmacct_id
	                                                                                Heap Fetches: 92100
	                                                                                Buffers: shared hit=33118
	                                                                    ->  Hash  (cost=1196.49..1196.49 rows=20693 width=9) (actual rows=20693 loops=1)
	                                                                          Output: cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_cntct_id, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                          Buckets: 32768  Batches: 1  Memory Usage: 1140kB
	                                                                          Buffers: shared hit=289
	                                                                          ->  Hash Left Join  (cost=554.28..1196.49 rows=20693 width=9) (actual rows=20693 loops=1)
	                                                                                Output: cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_cntct_id, doctor_spoken_language.doctor_spoken_language_language_id
	                                                                                Hash Cond: (cntct_dr_ext.cntct_dr_ext_cntct_id = doctor_spoken_language.doctor_spoken_language_cntct_id)
	                                                                                Buffers: shared hit=289
	                                                                                ->  Seq Scan on ww_custom.cntct_dr_ext  (cost=0.00..372.93 rows=20693 width=5) (actual rows=20693 loops=1)
	                                                                                      Output: cntct_dr_ext.cntct_dr_ext_id, cntct_dr_ext.cntct_dr_ext_cntct_id, cntct_dr_ext.cntct_dr_ext_npi, cntct_dr_ext.cntct_dr_ext_license, cntct_dr_ext.cntct_dr_ext_license_expire, cntct_dr_ext.cntct_dr_ext_minority, cntct_dr_ext.cntct_dr_ext_date_inserted, cntct_dr_ext.cntct_dr_ext_date_updated
	                                                                                      Buffers: shared hit=166
	                                                                                ->  Hash  (cost=314.68..314.68 rows=19168 width=8) (actual rows=19168 loops=1)
	                                                                                      Output: doctor_spoken_language.doctor_spoken_language_language_id, doctor_spoken_language.doctor_spoken_language_cntct_id
	                                                                                      Buckets: 32768  Batches: 1  Memory Usage: 1005kB
	                                                                                      Buffers: shared hit=123
	                                                                                      ->  Seq Scan on ww_custom.doctor_spoken_language  (cost=0.00..314.68 rows=19168 width=8) (actual rows=19168 loops=1)
	                                                                                            Output: doctor_spoken_language.doctor_spoken_language_language_id, doctor_spoken_language.doctor_spoken_language_cntct_id
	                                                                                            Filter: doctor_spoken_language.doctor_spoken_language_active
	                                                                                            Buffers: shared hit=123
	                                                              ->  Hash  (cost=1.07..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                    Output: spoken_languages.spoken_languages_language, spoken_languages.spoken_languages_id
	                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                    Buffers: shared hit=1
	                                                                    ->  Seq Scan on ww_custom.spoken_languages  (cost=0.00..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                          Output: spoken_languages.spoken_languages_language, spoken_languages.spoken_languages_id
	                                                                          Buffers: shared hit=1
	                                      ->  Subquery Scan on "*SELECT* 2"  (cost=3798.64..4066.60 rows=6699 width=68) (actual rows=6737 loops=2662)
	                                            Output: "*SELECT* 2".phy_crmacct_id, "*SELECT* 2".spoken_language, "*SELECT* 2".minority
	                                            Buffers: shared hit=942
	                                            ->  GroupAggregate  (cost=3798.64..3999.61 rows=6699 width=68) (actual rows=6737 loops=2662)
	                                                  Output: provider_spoken_language.provider_spoken_language_crmacct_id, array_agg(DISTINCT COALESCE(spoken_languages_1.spoken_languages_language, 'English'::character varying)), array_agg(DISTINCT COALESCE(provider_minority.provider_minority_minority, false))
	                                                  Group Key: provider_spoken_language.provider_spoken_language_crmacct_id
	                                                  Filter: (array_agg(DISTINCT COALESCE(provider_minority.provider_minority_minority, false)) @> '{f}'::boolean[])
	                                                  Buffers: shared hit=942
	                                                  ->  Sort  (cost=3798.64..3815.39 rows=6699 width=12) (actual rows=6923 loops=2662)
	                                                        Output: provider_spoken_language.provider_spoken_language_crmacct_id, spoken_languages_1.spoken_languages_language, provider_minority.provider_minority_minority
	                                                        Sort Key: provider_spoken_language.provider_spoken_language_crmacct_id
	                                                        Sort Method: quicksort  Memory: 517kB
	                                                        Buffers: shared hit=942
	                                                        ->  Hash Left Join  (cost=338.54..3372.93 rows=6699 width=12) (actual rows=6923 loops=1)
	                                                              Output: provider_spoken_language.provider_spoken_language_crmacct_id, spoken_languages_1.spoken_languages_language, provider_minority.provider_minority_minority
	                                                              Inner Unique: true
	                                                              Hash Cond: (provider_spoken_language.provider_spoken_language_language_id = spoken_languages_1.spoken_languages_id)
	                                                              Buffers: shared hit=942
	                                                              ->  Hash Left Join  (cost=337.39..3343.54 rows=6699 width=9) (actual rows=6923 loops=1)
	                                                                    Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                    Hash Cond: (crmacctrole_6.crmacctrole_crmacct_id = provider_spoken_language.provider_spoken_language_crmacct_id)
	                                                                    Buffers: shared hit=941
	                                                                    ->  Seq Scan on public.crmacctrole crmacctrole_6  (cost=0.00..2969.86 rows=6699 width=4) (actual rows=6799 loops=1)
	                                                                          Output: crmacctrole_6.crmacctrole_id, crmacctrole_6.crmacctrole_crmacct_id, crmacctrole_6.crmacctrole_crmrole_id
	                                                                          Filter: (crmacctrole_6.crmacctrole_crmrole_id = ANY ('{19,21}'::integer[]))
	                                                                          Rows Removed by Filter: 159030
	                                                                          Buffers: shared hit=897
	                                                                    ->  Hash  (cost=252.40..252.40 rows=6799 width=9) (actual rows=6799 loops=1)
	                                                                          Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                          Buckets: 8192  Batches: 1  Memory Usage: 330kB
	                                                                          Buffers: shared hit=44
	                                                                          ->  Hash Right Join  (cost=196.98..252.40 rows=6799 width=9) (actual rows=6799 loops=1)
	                                                                                Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id, provider_minority.provider_minority_minority
	                                                                                Hash Cond: (provider_minority.provider_minority_crmacct_id = provider_spoken_language.provider_spoken_language_crmacct_id)
	                                                                                Buffers: shared hit=44
	                                                                                ->  Seq Scan on ww_custom.provider_minority  (cost=0.00..28.10 rows=1810 width=5) (actual rows=0 loops=1)
	                                                                                      Output: provider_minority.provider_minority_id, provider_minority.provider_minority_crmacct_id, provider_minority.provider_minority_minority, provider_minority.provider_minority_date_inserted, provider_minority.provider_minority_date_updated
	                                                                                ->  Hash  (cost=111.99..111.99 rows=6799 width=8) (actual rows=6799 loops=1)
	                                                                                      Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id
	                                                                                      Buckets: 8192  Batches: 1  Memory Usage: 330kB
	                                                                                      Buffers: shared hit=44
	                                                                                      ->  Seq Scan on ww_custom.provider_spoken_language  (cost=0.00..111.99 rows=6799 width=8) (actual rows=6799 loops=1)
	                                                                                            Output: provider_spoken_language.provider_spoken_language_crmacct_id, provider_spoken_language.provider_spoken_language_language_id
	                                                                                            Buffers: shared hit=44
	                                                              ->  Hash  (cost=1.07..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                    Output: spoken_languages_1.spoken_languages_language, spoken_languages_1.spoken_languages_id
	                                                                    Buckets: 1024  Batches: 1  Memory Usage: 9kB
	                                                                    Buffers: shared hit=1
	                                                                    ->  Seq Scan on ww_custom.spoken_languages spoken_languages_1  (cost=0.00..1.07 rows=7 width=11) (actual rows=7 loops=1)
	                                                                          Output: spoken_languages_1.spoken_languages_language, spoken_languages_1.spoken_languages_id
	                                                                          Buffers: shared hit=1
	                    ->  Hash  (cost=6854.15..6854.15 rows=209 width=36) (actual rows=12381 loops=1)
	                          Output: doc.doctor_list, doc.crmacctcntctass_crmacct_id
	                          Buckets: 16384 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 1792kB
	                          Buffers: shared hit=701165
	                          ->  Subquery Scan on doc  (cost=6847.88..6854.15 rows=209 width=36) (actual rows=12381 loops=1)
	                                Output: doc.doctor_list, doc.crmacctcntctass_crmacct_id
	                                Buffers: shared hit=701165
	                                ->  GroupAggregate  (cost=6847.88..6852.06 rows=209 width=36) (actual rows=12381 loops=1)
	                                      Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, array_agg(cntct.cntct_name)
	                                      Group Key: crmacctcntctass_4.crmacctcntctass_crmacct_id
	                                      Buffers: shared hit=701165
	                                      ->  Sort  (cost=6847.88..6848.40 rows=209 width=21) (actual rows=41725 loops=1)
	                                            Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, cntct.cntct_name
	                                            Sort Key: crmacctcntctass_4.crmacctcntctass_crmacct_id
	                                            Sort Method: quicksort  Memory: 4792kB
	                                            Buffers: shared hit=701165
	                                            ->  Nested Loop  (cost=0.42..6839.83 rows=209 width=21) (actual rows=41725 loops=1)
	                                                  Output: crmacctcntctass_4.crmacctcntctass_crmacct_id, cntct.cntct_name
	                                                  Buffers: shared hit=701165
	                                                  ->  Seq Scan on public.cntct  (cost=0.00..5171.43 rows=872 width=21) (actual rows=174310 loops=1)
	                                                        Output: cntct.cntct_id, cntct.cntct_addr_id, cntct.cntct_first_name, cntct.cntct_last_name, cntct.cntct_honorific, cntct.cntct_initials, cntct.cntct_active, cntct.cntct_email, cntct.cntct_webaddr, cntct.cntct_notes, cntct.cntct_title, cntct.cntct_number, cntct.cntct_middle, cntct.cntct_suffix, cntct.cntct_owner_username, cntct.cntct_name, cntct.cntct_created, cntct.cntct_lastupdated, cntct.cntct_companyname, cntct.cntct_email_optin
	                                                        Filter: (upper(cntct.cntct_name) ~ upper($68))
	                                                        Buffers: shared hit=2121
	                                                  ->  Index Scan using crmacctcntctass_cntct_id_idx on public.crmacctcntctass crmacctcntctass_4  (cost=0.42..1.90 rows=1 width=8) (actual rows=0 loops=174310)
	                                                        Output: crmacctcntctass_4.crmacctcntctass_id, crmacctcntctass_4.crmacctcntctass_crmacct_id, crmacctcntctass_4.crmacctcntctass_cntct_id, crmacctcntctass_4.crmacctcntctass_crmrole_id, crmacctcntctass_4.crmacctcntctass_active, crmacctcntctass_4.crmacctcntctass_default, crmacctcntctass_4.crmacctcntctass_createdby, crmacctcntctass_4.crmacctcntctass_created, crmacctcntctass_4.crmacctcntctass_lastupdated
	                                                        Index Cond: (crmacctcntctass_4.crmacctcntctass_cntct_id = cntct.cntct_id)
	                                                        Filter: (crmacctcntctass_4.crmacctcntctass_active AND (crmacctcntctass_4.crmacctcntctass_crmrole_id = 23))
	                                                        Rows Removed by Filter: 1
	                                                        Buffers: shared hit=699044
	              ->  HashAggregate  (cost=25.40..27.90 rows=200 width=36) (actual rows=0 loops=2582)
	                    Output: case_management_notes.case_management_notes_provider_id, string_agg(((case_management_notes.case_management_notes_department || ':'::text) || case_management_notes.case_management_notes_text), ','::text)
	                    Group Key: case_management_notes.case_management_notes_provider_id
	                    ->  Seq Scan on ww_custom.case_management_notes  (cost=0.00..17.70 rows=770 width=68) (actual rows=0 loops=1)
	                          Output: case_management_notes.case_management_notes_id, case_management_notes.case_management_notes_provider_id, case_management_notes.case_management_notes_department, case_management_notes.case_management_notes_text, case_management_notes.case_management_notes_active, case_management_notes.case_management_notes_expires
	              SubPlan 2
	                ->  Result  (cost=5.77..6.03 rows=1 width=1) (actual rows=1 loops=2582)
	                      Output: ww_custom.donotoperate($1)
	                      Buffers: shared hit=23238
	                      InitPlan 1 (returns $1)
	                        ->  Bitmap Heap Scan on public.state  (cost=1.84..5.77 rows=1 width=4) (actual rows=1 loops=2582)
	                              Output: state.state_id
	                              Recheck Cond: (state.state_country_id = 230)
	                              Filter: (state.state_abbr = addr.addr_state)
	                              Rows Removed by Filter: 61
	                              Heap Blocks: exact=2582
	                              Buffers: shared hit=7746
	                              ->  Bitmap Index Scan on state_state_country_id_key  (cost=0.00..1.84 rows=62 width=0) (actual rows=62 loops=2582)
	                                    Index Cond: (state.state_country_id = 230)
	                                    Buffers: shared hit=5164
2021-01-12 17:56:23 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] CONTEXT:  PL/pgSQL function ww_custom.network_search_1(text,text[],text[],text,text,text,text,text,text,text,text,text,text,integer,text,text[],boolean,integer,text) line 73 at RETURN QUERY
2021-01-12 17:56:23 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] LOG:  duration: 208783.501 ms  plan:
	Query Text: SELECT * from ww_custom.network_search_1(
	'Physician Practice',
	'{}',         
	'{}',         
	'',           
	'',           
	'',           
	'PA',         
	'',           
	'',           
	'',           
	'',           
	'',           
	'',           
	0,            
	'',           
	'{}',         
	false,        
	0    ,        
	''            
	);
	Function Scan on ww_custom.network_search_1  (cost=0.25..10.25 rows=1000 width=623) (actual rows=2582 loops=1)
	  Output: network_search_result_id, network_search_result_number, network_search_result_name, network_search_result_addr_line1, network_search_result_addr_line2, network_search_result_addr_line3, network_search_result_addr_city, network_search_result_addr_state, network_search_result_addr_zip, network_search_result_addr_county, network_search_result_speciality, network_search_result_ppo, network_search_result_distance, network_search_result_phone, network_search_result_fax, network_search_result_type, network_search_results_notes, network_search_result_role, network_search_result_language, network_search_result_minority, network_search_result_health_system, network_search_doctors, network_search_do_not_use, network_search_do_not_operate
	  Function Call: ww_custom.network_search_1('Physician Practice'::text, '{}'::text[], '{}'::text[], ''::text, ''::text, ''::text, 'PA'::text, ''::text, ''::text, ''::text, ''::text, ''::text, ''::text, 0, ''::text, '{}'::text[], false, 0, ''::text)
	  Buffers: shared hit=1991224 read=43
	  
2021-01-12 17:56:23 EST [21788]: db=wwdev,user=postgres,app=psql,client=[local] LOG:  duration: 208783.804 ms  statement: SELECT * from ww_custom.network_search_1(
	'Physician Practice',
	'{}',         
	'{}',         
	'',           
	'',           
	'',           
	'PA',         
	'',           
	'',           
	'',           
	'',           
	'',           
	'',           
	0,            
	'',           
	'{}',         
	false,        
	0    ,        
	''            
	);
